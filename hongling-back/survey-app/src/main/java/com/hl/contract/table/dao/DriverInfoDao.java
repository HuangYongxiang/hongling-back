package com.hl.contract.table.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hl.contract.table.model.DriverInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DRIVER_INFO".
*/
public class DriverInfoDao extends AbstractDao<DriverInfo, String> {

    public static final String TABLENAME = "DRIVER_INFO";

    /**
     * Properties of entity DriverInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property ReportCode = new Property(1, String.class, "reportCode", false, "REPORT_CODE");
        public final static Property DriverName = new Property(2, String.class, "driverName", false, "DRIVER_NAME");
        public final static Property ContactNumber = new Property(3, String.class, "contactNumber", false, "CONTACT_NUMBER");
        public final static Property CertificateType = new Property(4, String.class, "certificateType", false, "CERTIFICATE_TYPE");
        public final static Property CertificateTypeCode = new Property(5, String.class, "certificateTypeCode", false, "CERTIFICATE_TYPE_CODE");
        public final static Property CertificateNo = new Property(6, String.class, "certificateNo", false, "CERTIFICATE_NO");
        public final static Property Sex = new Property(7, String.class, "sex", false, "SEX");
        public final static Property Age = new Property(8, int.class, "age", false, "AGE");
        public final static Property LicenseNumber = new Property(9, String.class, "licenseNumber", false, "LICENSE_NUMBER");
        public final static Property DriveType = new Property(10, String.class, "driveType", false, "DRIVE_TYPE");
        public final static Property DriveTypeCode = new Property(11, String.class, "driveTypeCode", false, "DRIVE_TYPE_CODE");
        public final static Property PlateNo = new Property(12, String.class, "plateNo", false, "PLATE_NO");
        public final static Property DriverTerritorial = new Property(13, String.class, "driverTerritorial", false, "DRIVER_TERRITORIAL");
        public final static Property CertificationAuthority = new Property(14, String.class, "certificationAuthority", false, "CERTIFICATION_AUTHORITY");
        public final static Property DegreeOfEducation = new Property(15, String.class, "degreeOfEducation", false, "DEGREE_OF_EDUCATION");
        public final static Property Profession = new Property(16, String.class, "profession", false, "PROFESSION");
        public final static Property IssueDate = new Property(17, String.class, "issueDate", false, "ISSUE_DATE");
        public final static Property UnitOrAddress = new Property(18, String.class, "unitOrAddress", false, "UNIT_OR_ADDRESS");
        public final static Property SerialNo = new Property(19, Integer.class, "serialNo", false, "SERIAL_NO");
    }


    public DriverInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DriverInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DRIVER_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"REPORT_CODE\" TEXT," + // 1: reportCode
                "\"DRIVER_NAME\" TEXT," + // 2: driverName
                "\"CONTACT_NUMBER\" TEXT," + // 3: contactNumber
                "\"CERTIFICATE_TYPE\" TEXT," + // 4: certificateType
                "\"CERTIFICATE_TYPE_CODE\" TEXT," + // 5: certificateTypeCode
                "\"CERTIFICATE_NO\" TEXT," + // 6: certificateNo
                "\"SEX\" TEXT," + // 7: sex
                "\"AGE\" INTEGER NOT NULL ," + // 8: age
                "\"LICENSE_NUMBER\" TEXT," + // 9: licenseNumber
                "\"DRIVE_TYPE\" TEXT," + // 10: driveType
                "\"DRIVE_TYPE_CODE\" TEXT," + // 11: driveTypeCode
                "\"PLATE_NO\" TEXT," + // 12: plateNo
                "\"DRIVER_TERRITORIAL\" TEXT," + // 13: driverTerritorial
                "\"CERTIFICATION_AUTHORITY\" TEXT," + // 14: certificationAuthority
                "\"DEGREE_OF_EDUCATION\" TEXT," + // 15: degreeOfEducation
                "\"PROFESSION\" TEXT," + // 16: profession
                "\"ISSUE_DATE\" TEXT," + // 17: issueDate
                "\"UNIT_OR_ADDRESS\" TEXT," + // 18: unitOrAddress
                "\"SERIAL_NO\" INTEGER);"); // 19: serialNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DRIVER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DriverInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(2, reportCode);
        }
 
        String driverName = entity.getDriverName();
        if (driverName != null) {
            stmt.bindString(3, driverName);
        }
 
        String contactNumber = entity.getContactNumber();
        if (contactNumber != null) {
            stmt.bindString(4, contactNumber);
        }
 
        String certificateType = entity.getCertificateType();
        if (certificateType != null) {
            stmt.bindString(5, certificateType);
        }
 
        String certificateTypeCode = entity.getCertificateTypeCode();
        if (certificateTypeCode != null) {
            stmt.bindString(6, certificateTypeCode);
        }
 
        String certificateNo = entity.getCertificateNo();
        if (certificateNo != null) {
            stmt.bindString(7, certificateNo);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(8, sex);
        }
        stmt.bindLong(9, entity.getAge());
 
        String licenseNumber = entity.getLicenseNumber();
        if (licenseNumber != null) {
            stmt.bindString(10, licenseNumber);
        }
 
        String driveType = entity.getDriveType();
        if (driveType != null) {
            stmt.bindString(11, driveType);
        }
 
        String driveTypeCode = entity.getDriveTypeCode();
        if (driveTypeCode != null) {
            stmt.bindString(12, driveTypeCode);
        }
 
        String plateNo = entity.getPlateNo();
        if (plateNo != null) {
            stmt.bindString(13, plateNo);
        }
 
        String driverTerritorial = entity.getDriverTerritorial();
        if (driverTerritorial != null) {
            stmt.bindString(14, driverTerritorial);
        }
 
        String certificationAuthority = entity.getCertificationAuthority();
        if (certificationAuthority != null) {
            stmt.bindString(15, certificationAuthority);
        }
 
        String degreeOfEducation = entity.getDegreeOfEducation();
        if (degreeOfEducation != null) {
            stmt.bindString(16, degreeOfEducation);
        }
 
        String profession = entity.getProfession();
        if (profession != null) {
            stmt.bindString(17, profession);
        }
 
        String issueDate = entity.getIssueDate();
        if (issueDate != null) {
            stmt.bindString(18, issueDate);
        }
 
        String unitOrAddress = entity.getUnitOrAddress();
        if (unitOrAddress != null) {
            stmt.bindString(19, unitOrAddress);
        }
 
        Integer serialNo = entity.getSerialNo();
        if (serialNo != null) {
            stmt.bindLong(20, serialNo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DriverInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(2, reportCode);
        }
 
        String driverName = entity.getDriverName();
        if (driverName != null) {
            stmt.bindString(3, driverName);
        }
 
        String contactNumber = entity.getContactNumber();
        if (contactNumber != null) {
            stmt.bindString(4, contactNumber);
        }
 
        String certificateType = entity.getCertificateType();
        if (certificateType != null) {
            stmt.bindString(5, certificateType);
        }
 
        String certificateTypeCode = entity.getCertificateTypeCode();
        if (certificateTypeCode != null) {
            stmt.bindString(6, certificateTypeCode);
        }
 
        String certificateNo = entity.getCertificateNo();
        if (certificateNo != null) {
            stmt.bindString(7, certificateNo);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(8, sex);
        }
        stmt.bindLong(9, entity.getAge());
 
        String licenseNumber = entity.getLicenseNumber();
        if (licenseNumber != null) {
            stmt.bindString(10, licenseNumber);
        }
 
        String driveType = entity.getDriveType();
        if (driveType != null) {
            stmt.bindString(11, driveType);
        }
 
        String driveTypeCode = entity.getDriveTypeCode();
        if (driveTypeCode != null) {
            stmt.bindString(12, driveTypeCode);
        }
 
        String plateNo = entity.getPlateNo();
        if (plateNo != null) {
            stmt.bindString(13, plateNo);
        }
 
        String driverTerritorial = entity.getDriverTerritorial();
        if (driverTerritorial != null) {
            stmt.bindString(14, driverTerritorial);
        }
 
        String certificationAuthority = entity.getCertificationAuthority();
        if (certificationAuthority != null) {
            stmt.bindString(15, certificationAuthority);
        }
 
        String degreeOfEducation = entity.getDegreeOfEducation();
        if (degreeOfEducation != null) {
            stmt.bindString(16, degreeOfEducation);
        }
 
        String profession = entity.getProfession();
        if (profession != null) {
            stmt.bindString(17, profession);
        }
 
        String issueDate = entity.getIssueDate();
        if (issueDate != null) {
            stmt.bindString(18, issueDate);
        }
 
        String unitOrAddress = entity.getUnitOrAddress();
        if (unitOrAddress != null) {
            stmt.bindString(19, unitOrAddress);
        }
 
        Integer serialNo = entity.getSerialNo();
        if (serialNo != null) {
            stmt.bindLong(20, serialNo);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DriverInfo readEntity(Cursor cursor, int offset) {
        DriverInfo entity = new DriverInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // reportCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // driverName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contactNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // certificateType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // certificateTypeCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // certificateNo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sex
            cursor.getInt(offset + 8), // age
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // licenseNumber
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // driveType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // driveTypeCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // plateNo
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // driverTerritorial
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // certificationAuthority
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // degreeOfEducation
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // profession
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // issueDate
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // unitOrAddress
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19) // serialNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DriverInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setReportCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDriverName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContactNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCertificateType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCertificateTypeCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCertificateNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSex(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAge(cursor.getInt(offset + 8));
        entity.setLicenseNumber(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDriveType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDriveTypeCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPlateNo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDriverTerritorial(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCertificationAuthority(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDegreeOfEducation(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setProfession(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIssueDate(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUnitOrAddress(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setSerialNo(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DriverInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(DriverInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DriverInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
