package com.hl.contract.table.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hl.contract.table.model.SurveyAimCar;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SURVEY_AIM_CAR".
*/
public class SurveyAimCarDao extends AbstractDao<SurveyAimCar, String> {

    public static final String TABLENAME = "SURVEY_AIM_CAR";

    /**
     * Properties of entity SurveyAimCar.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property FlowId = new Property(1, String.class, "flowId", false, "FLOW_ID");
        public final static Property EvalId = new Property(2, String.class, "evalId", false, "EVAL_ID");
        public final static Property ReportCode = new Property(3, String.class, "reportCode", false, "REPORT_CODE");
        public final static Property RealPrice = new Property(4, Double.class, "realPrice", false, "REAL_PRICE");
        public final static Property VehiclePrice = new Property(5, Double.class, "vehiclePrice", false, "VEHICLE_PRICE");
        public final static Property IsImport = new Property(6, String.class, "isImport", false, "IS_IMPORT");
        public final static Property VehicleType = new Property(7, String.class, "vehicleType", false, "VEHICLE_TYPE");
        public final static Property VehicleTypeName = new Property(8, String.class, "vehicleTypeName", false, "VEHICLE_TYPE_NAME");
        public final static Property CarColor = new Property(9, String.class, "carColor", false, "CAR_COLOR");
        public final static Property CarColorName = new Property(10, String.class, "CarColorName", false, "CAR_COLOR_NAME");
        public final static Property EnrolDate = new Property(11, String.class, "enrolDate", false, "ENROL_DATE");
        public final static Property UseProperty = new Property(12, String.class, "useProperty", false, "USE_PROPERTY");
        public final static Property DriverArea = new Property(13, String.class, "driverArea", false, "DRIVER_AREA");
        public final static Property Seat = new Property(14, Long.class, "seat", false, "SEAT");
        public final static Property VinNo = new Property(15, String.class, "vinNo", false, "VIN_NO");
        public final static Property EngineNo = new Property(16, String.class, "engineNo", false, "ENGINE_NO");
        public final static Property VehicleModel = new Property(17, String.class, "vehicleModel", false, "VEHICLE_MODEL");
        public final static Property PlateNum = new Property(18, String.class, "plateNum", false, "PLATE_NUM");
        public final static Property Power = new Property(19, Double.class, "power", false, "POWER");
        public final static Property Displacement = new Property(20, String.class, "displacement", false, "DISPLACEMENT");
        public final static Property Tonnage = new Property(21, Double.class, "tonnage", false, "TONNAGE");
        public final static Property PlateColor = new Property(22, String.class, "plateColor", false, "PLATE_COLOR");
        public final static Property CreateTime = new Property(23, String.class, "createTime", false, "CREATE_TIME");
        public final static Property MakeDate = new Property(24, String.class, "makeDate", false, "MAKE_DATE");
        public final static Property GuardAlarm = new Property(25, String.class, "guardAlarm", false, "GUARD_ALARM");
        public final static Property ExemptFlag = new Property(26, String.class, "exemptFlag", false, "EXEMPT_FLAG");
        public final static Property BelongProperty = new Property(27, String.class, "belongProperty", false, "BELONG_PROPERTY");
    }


    public SurveyAimCarDao(DaoConfig config) {
        super(config);
    }
    
    public SurveyAimCarDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SURVEY_AIM_CAR\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"FLOW_ID\" TEXT," + // 1: flowId
                "\"EVAL_ID\" TEXT," + // 2: evalId
                "\"REPORT_CODE\" TEXT," + // 3: reportCode
                "\"REAL_PRICE\" REAL," + // 4: realPrice
                "\"VEHICLE_PRICE\" REAL," + // 5: vehiclePrice
                "\"IS_IMPORT\" TEXT," + // 6: isImport
                "\"VEHICLE_TYPE\" TEXT," + // 7: vehicleType
                "\"VEHICLE_TYPE_NAME\" TEXT," + // 8: vehicleTypeName
                "\"CAR_COLOR\" TEXT," + // 9: carColor
                "\"CAR_COLOR_NAME\" TEXT," + // 10: CarColorName
                "\"ENROL_DATE\" TEXT," + // 11: enrolDate
                "\"USE_PROPERTY\" TEXT," + // 12: useProperty
                "\"DRIVER_AREA\" TEXT," + // 13: driverArea
                "\"SEAT\" INTEGER," + // 14: seat
                "\"VIN_NO\" TEXT," + // 15: vinNo
                "\"ENGINE_NO\" TEXT," + // 16: engineNo
                "\"VEHICLE_MODEL\" TEXT," + // 17: vehicleModel
                "\"PLATE_NUM\" TEXT," + // 18: plateNum
                "\"POWER\" REAL," + // 19: power
                "\"DISPLACEMENT\" TEXT," + // 20: displacement
                "\"TONNAGE\" REAL," + // 21: tonnage
                "\"PLATE_COLOR\" TEXT," + // 22: plateColor
                "\"CREATE_TIME\" TEXT," + // 23: createTime
                "\"MAKE_DATE\" TEXT," + // 24: makeDate
                "\"GUARD_ALARM\" TEXT," + // 25: guardAlarm
                "\"EXEMPT_FLAG\" TEXT," + // 26: exemptFlag
                "\"BELONG_PROPERTY\" TEXT);"); // 27: belongProperty
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SURVEY_AIM_CAR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SurveyAimCar entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String flowId = entity.getFlowId();
        if (flowId != null) {
            stmt.bindString(2, flowId);
        }
 
        String evalId = entity.getEvalId();
        if (evalId != null) {
            stmt.bindString(3, evalId);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(4, reportCode);
        }
 
        Double realPrice = entity.getRealPrice();
        if (realPrice != null) {
            stmt.bindDouble(5, realPrice);
        }
 
        Double vehiclePrice = entity.getVehiclePrice();
        if (vehiclePrice != null) {
            stmt.bindDouble(6, vehiclePrice);
        }
 
        String isImport = entity.getIsImport();
        if (isImport != null) {
            stmt.bindString(7, isImport);
        }
 
        String vehicleType = entity.getVehicleType();
        if (vehicleType != null) {
            stmt.bindString(8, vehicleType);
        }
 
        String vehicleTypeName = entity.getVehicleTypeName();
        if (vehicleTypeName != null) {
            stmt.bindString(9, vehicleTypeName);
        }
 
        String carColor = entity.getCarColor();
        if (carColor != null) {
            stmt.bindString(10, carColor);
        }
 
        String CarColorName = entity.getCarColorName();
        if (CarColorName != null) {
            stmt.bindString(11, CarColorName);
        }
 
        String enrolDate = entity.getEnrolDate();
        if (enrolDate != null) {
            stmt.bindString(12, enrolDate);
        }
 
        String useProperty = entity.getUseProperty();
        if (useProperty != null) {
            stmt.bindString(13, useProperty);
        }
 
        String driverArea = entity.getDriverArea();
        if (driverArea != null) {
            stmt.bindString(14, driverArea);
        }
 
        Long seat = entity.getSeat();
        if (seat != null) {
            stmt.bindLong(15, seat);
        }
 
        String vinNo = entity.getVinNo();
        if (vinNo != null) {
            stmt.bindString(16, vinNo);
        }
 
        String engineNo = entity.getEngineNo();
        if (engineNo != null) {
            stmt.bindString(17, engineNo);
        }
 
        String vehicleModel = entity.getVehicleModel();
        if (vehicleModel != null) {
            stmt.bindString(18, vehicleModel);
        }
 
        String plateNum = entity.getPlateNum();
        if (plateNum != null) {
            stmt.bindString(19, plateNum);
        }
 
        Double power = entity.getPower();
        if (power != null) {
            stmt.bindDouble(20, power);
        }
 
        String displacement = entity.getDisplacement();
        if (displacement != null) {
            stmt.bindString(21, displacement);
        }
 
        Double tonnage = entity.getTonnage();
        if (tonnage != null) {
            stmt.bindDouble(22, tonnage);
        }
 
        String plateColor = entity.getPlateColor();
        if (plateColor != null) {
            stmt.bindString(23, plateColor);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(24, createTime);
        }
 
        String makeDate = entity.getMakeDate();
        if (makeDate != null) {
            stmt.bindString(25, makeDate);
        }
 
        String guardAlarm = entity.getGuardAlarm();
        if (guardAlarm != null) {
            stmt.bindString(26, guardAlarm);
        }
 
        String exemptFlag = entity.getExemptFlag();
        if (exemptFlag != null) {
            stmt.bindString(27, exemptFlag);
        }
 
        String belongProperty = entity.getBelongProperty();
        if (belongProperty != null) {
            stmt.bindString(28, belongProperty);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SurveyAimCar entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String flowId = entity.getFlowId();
        if (flowId != null) {
            stmt.bindString(2, flowId);
        }
 
        String evalId = entity.getEvalId();
        if (evalId != null) {
            stmt.bindString(3, evalId);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(4, reportCode);
        }
 
        Double realPrice = entity.getRealPrice();
        if (realPrice != null) {
            stmt.bindDouble(5, realPrice);
        }
 
        Double vehiclePrice = entity.getVehiclePrice();
        if (vehiclePrice != null) {
            stmt.bindDouble(6, vehiclePrice);
        }
 
        String isImport = entity.getIsImport();
        if (isImport != null) {
            stmt.bindString(7, isImport);
        }
 
        String vehicleType = entity.getVehicleType();
        if (vehicleType != null) {
            stmt.bindString(8, vehicleType);
        }
 
        String vehicleTypeName = entity.getVehicleTypeName();
        if (vehicleTypeName != null) {
            stmt.bindString(9, vehicleTypeName);
        }
 
        String carColor = entity.getCarColor();
        if (carColor != null) {
            stmt.bindString(10, carColor);
        }
 
        String CarColorName = entity.getCarColorName();
        if (CarColorName != null) {
            stmt.bindString(11, CarColorName);
        }
 
        String enrolDate = entity.getEnrolDate();
        if (enrolDate != null) {
            stmt.bindString(12, enrolDate);
        }
 
        String useProperty = entity.getUseProperty();
        if (useProperty != null) {
            stmt.bindString(13, useProperty);
        }
 
        String driverArea = entity.getDriverArea();
        if (driverArea != null) {
            stmt.bindString(14, driverArea);
        }
 
        Long seat = entity.getSeat();
        if (seat != null) {
            stmt.bindLong(15, seat);
        }
 
        String vinNo = entity.getVinNo();
        if (vinNo != null) {
            stmt.bindString(16, vinNo);
        }
 
        String engineNo = entity.getEngineNo();
        if (engineNo != null) {
            stmt.bindString(17, engineNo);
        }
 
        String vehicleModel = entity.getVehicleModel();
        if (vehicleModel != null) {
            stmt.bindString(18, vehicleModel);
        }
 
        String plateNum = entity.getPlateNum();
        if (plateNum != null) {
            stmt.bindString(19, plateNum);
        }
 
        Double power = entity.getPower();
        if (power != null) {
            stmt.bindDouble(20, power);
        }
 
        String displacement = entity.getDisplacement();
        if (displacement != null) {
            stmt.bindString(21, displacement);
        }
 
        Double tonnage = entity.getTonnage();
        if (tonnage != null) {
            stmt.bindDouble(22, tonnage);
        }
 
        String plateColor = entity.getPlateColor();
        if (plateColor != null) {
            stmt.bindString(23, plateColor);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(24, createTime);
        }
 
        String makeDate = entity.getMakeDate();
        if (makeDate != null) {
            stmt.bindString(25, makeDate);
        }
 
        String guardAlarm = entity.getGuardAlarm();
        if (guardAlarm != null) {
            stmt.bindString(26, guardAlarm);
        }
 
        String exemptFlag = entity.getExemptFlag();
        if (exemptFlag != null) {
            stmt.bindString(27, exemptFlag);
        }
 
        String belongProperty = entity.getBelongProperty();
        if (belongProperty != null) {
            stmt.bindString(28, belongProperty);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SurveyAimCar readEntity(Cursor cursor, int offset) {
        SurveyAimCar entity = new SurveyAimCar( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // flowId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // evalId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // reportCode
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // realPrice
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // vehiclePrice
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // isImport
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // vehicleType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // vehicleTypeName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // carColor
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // CarColorName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // enrolDate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // useProperty
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // driverArea
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // seat
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // vinNo
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // engineNo
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // vehicleModel
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // plateNum
            cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19), // power
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // displacement
            cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21), // tonnage
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // plateColor
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // createTime
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // makeDate
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // guardAlarm
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // exemptFlag
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27) // belongProperty
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SurveyAimCar entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFlowId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEvalId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReportCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRealPrice(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setVehiclePrice(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setIsImport(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVehicleType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVehicleTypeName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCarColor(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCarColorName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEnrolDate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUseProperty(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDriverArea(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSeat(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setVinNo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setEngineNo(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setVehicleModel(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPlateNum(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPower(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setDisplacement(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setTonnage(cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21));
        entity.setPlateColor(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCreateTime(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setMakeDate(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setGuardAlarm(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setExemptFlag(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setBelongProperty(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SurveyAimCar entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SurveyAimCar entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SurveyAimCar entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
