package com.hl.contract.table.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hl.contract.table.model.MemoInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEMO_INFO".
*/
public class MemoInfoDao extends AbstractDao<MemoInfo, String> {

    public static final String TABLENAME = "MEMO_INFO";

    /**
     * Properties of entity MemoInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property TaskNo = new Property(1, String.class, "taskNo", false, "TASK_NO");
        public final static Property CaseNo = new Property(2, String.class, "caseNo", false, "CASE_NO");
        public final static Property UserCode = new Property(3, String.class, "userCode", false, "USER_CODE");
        public final static Property UserName = new Property(4, String.class, "userName", false, "USER_NAME");
        public final static Property OrgCode = new Property(5, String.class, "orgCode", false, "ORG_CODE");
        public final static Property OrgName = new Property(6, String.class, "orgName", false, "ORG_NAME");
        public final static Property MemoTitle = new Property(7, String.class, "memoTitle", false, "MEMO_TITLE");
        public final static Property MemoContent = new Property(8, String.class, "memoContent", false, "MEMO_CONTENT");
        public final static Property CreateTime = new Property(9, String.class, "createTime", false, "CREATE_TIME");
    }


    public MemoInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MemoInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEMO_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TASK_NO\" TEXT," + // 1: taskNo
                "\"CASE_NO\" TEXT," + // 2: caseNo
                "\"USER_CODE\" TEXT," + // 3: userCode
                "\"USER_NAME\" TEXT," + // 4: userName
                "\"ORG_CODE\" TEXT," + // 5: orgCode
                "\"ORG_NAME\" TEXT," + // 6: orgName
                "\"MEMO_TITLE\" TEXT," + // 7: memoTitle
                "\"MEMO_CONTENT\" TEXT," + // 8: memoContent
                "\"CREATE_TIME\" TEXT);"); // 9: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEMO_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MemoInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String taskNo = entity.getTaskNo();
        if (taskNo != null) {
            stmt.bindString(2, taskNo);
        }
 
        String caseNo = entity.getCaseNo();
        if (caseNo != null) {
            stmt.bindString(3, caseNo);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(4, userCode);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(5, userName);
        }
 
        String orgCode = entity.getOrgCode();
        if (orgCode != null) {
            stmt.bindString(6, orgCode);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(7, orgName);
        }
 
        String memoTitle = entity.getMemoTitle();
        if (memoTitle != null) {
            stmt.bindString(8, memoTitle);
        }
 
        String memoContent = entity.getMemoContent();
        if (memoContent != null) {
            stmt.bindString(9, memoContent);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(10, createTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MemoInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String taskNo = entity.getTaskNo();
        if (taskNo != null) {
            stmt.bindString(2, taskNo);
        }
 
        String caseNo = entity.getCaseNo();
        if (caseNo != null) {
            stmt.bindString(3, caseNo);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(4, userCode);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(5, userName);
        }
 
        String orgCode = entity.getOrgCode();
        if (orgCode != null) {
            stmt.bindString(6, orgCode);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(7, orgName);
        }
 
        String memoTitle = entity.getMemoTitle();
        if (memoTitle != null) {
            stmt.bindString(8, memoTitle);
        }
 
        String memoContent = entity.getMemoContent();
        if (memoContent != null) {
            stmt.bindString(9, memoContent);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(10, createTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MemoInfo readEntity(Cursor cursor, int offset) {
        MemoInfo entity = new MemoInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taskNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // caseNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // orgCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // orgName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // memoTitle
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // memoContent
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MemoInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTaskNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCaseNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrgCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrgName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMemoTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMemoContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MemoInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(MemoInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MemoInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
