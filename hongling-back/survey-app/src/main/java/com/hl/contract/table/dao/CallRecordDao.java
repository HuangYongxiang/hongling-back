package com.hl.contract.table.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hl.contract.table.model.CallRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CALL_RECORD".
*/
public class CallRecordDao extends AbstractDao<CallRecord, String> {

    public static final String TABLENAME = "CALL_RECORD";

    /**
     * Properties of entity CallRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property ReportNo = new Property(1, String.class, "reportNo", false, "REPORT_NO");
        public final static Property ContactPerson = new Property(2, String.class, "contactPerson", false, "CONTACT_PERSON");
        public final static Property ContactTelephone = new Property(3, String.class, "contactTelephone", false, "CONTACT_TELEPHONE");
        public final static Property ContactPlace = new Property(4, String.class, "contactPlace", false, "CONTACT_PLACE");
        public final static Property ContactTime = new Property(5, String.class, "contactTime", false, "CONTACT_TIME");
        public final static Property ContactLong = new Property(6, String.class, "contactLong", false, "CONTACT_LONG");
        public final static Property ContactLongitude = new Property(7, String.class, "contactLongitude", false, "CONTACT_LONGITUDE");
        public final static Property ContactLatitude = new Property(8, String.class, "contactLatitude", false, "CONTACT_LATITUDE");
    }


    public CallRecordDao(DaoConfig config) {
        super(config);
    }
    
    public CallRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CALL_RECORD\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"REPORT_NO\" TEXT," + // 1: reportNo
                "\"CONTACT_PERSON\" TEXT," + // 2: contactPerson
                "\"CONTACT_TELEPHONE\" TEXT," + // 3: contactTelephone
                "\"CONTACT_PLACE\" TEXT," + // 4: contactPlace
                "\"CONTACT_TIME\" TEXT," + // 5: contactTime
                "\"CONTACT_LONG\" TEXT," + // 6: contactLong
                "\"CONTACT_LONGITUDE\" TEXT," + // 7: contactLongitude
                "\"CONTACT_LATITUDE\" TEXT);"); // 8: contactLatitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CALL_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CallRecord entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportNo = entity.getReportNo();
        if (reportNo != null) {
            stmt.bindString(2, reportNo);
        }
 
        String contactPerson = entity.getContactPerson();
        if (contactPerson != null) {
            stmt.bindString(3, contactPerson);
        }
 
        String contactTelephone = entity.getContactTelephone();
        if (contactTelephone != null) {
            stmt.bindString(4, contactTelephone);
        }
 
        String contactPlace = entity.getContactPlace();
        if (contactPlace != null) {
            stmt.bindString(5, contactPlace);
        }
 
        String contactTime = entity.getContactTime();
        if (contactTime != null) {
            stmt.bindString(6, contactTime);
        }
 
        String contactLong = entity.getContactLong();
        if (contactLong != null) {
            stmt.bindString(7, contactLong);
        }
 
        String contactLongitude = entity.getContactLongitude();
        if (contactLongitude != null) {
            stmt.bindString(8, contactLongitude);
        }
 
        String contactLatitude = entity.getContactLatitude();
        if (contactLatitude != null) {
            stmt.bindString(9, contactLatitude);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CallRecord entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportNo = entity.getReportNo();
        if (reportNo != null) {
            stmt.bindString(2, reportNo);
        }
 
        String contactPerson = entity.getContactPerson();
        if (contactPerson != null) {
            stmt.bindString(3, contactPerson);
        }
 
        String contactTelephone = entity.getContactTelephone();
        if (contactTelephone != null) {
            stmt.bindString(4, contactTelephone);
        }
 
        String contactPlace = entity.getContactPlace();
        if (contactPlace != null) {
            stmt.bindString(5, contactPlace);
        }
 
        String contactTime = entity.getContactTime();
        if (contactTime != null) {
            stmt.bindString(6, contactTime);
        }
 
        String contactLong = entity.getContactLong();
        if (contactLong != null) {
            stmt.bindString(7, contactLong);
        }
 
        String contactLongitude = entity.getContactLongitude();
        if (contactLongitude != null) {
            stmt.bindString(8, contactLongitude);
        }
 
        String contactLatitude = entity.getContactLatitude();
        if (contactLatitude != null) {
            stmt.bindString(9, contactLatitude);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CallRecord readEntity(Cursor cursor, int offset) {
        CallRecord entity = new CallRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // reportNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // contactPerson
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contactTelephone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // contactPlace
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // contactTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contactLong
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // contactLongitude
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // contactLatitude
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CallRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setReportNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContactPerson(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContactTelephone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContactPlace(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContactTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContactLong(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContactLongitude(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setContactLatitude(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CallRecord entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(CallRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CallRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
