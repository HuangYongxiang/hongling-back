package com.hl.contract.table.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hl.contract.table.model.EvalLossInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVAL_LOSS_INFO".
*/
public class EvalLossInfoDao extends AbstractDao<EvalLossInfo, Long> {

    public static final String TABLENAME = "EVAL_LOSS_INFO";

    /**
     * Properties of entity EvalLossInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserCode = new Property(1, String.class, "userCode", false, "USER_CODE");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property RequestType = new Property(3, String.class, "requestType", false, "REQUEST_TYPE");
        public final static Property RequestUrlFlag = new Property(4, String.class, "requestUrlFlag", false, "REQUEST_URL_FLAG");
        public final static Property AppType = new Property(5, String.class, "appType", false, "APP_TYPE");
        public final static Property IsShieldingPrice = new Property(6, String.class, "isShieldingPrice", false, "IS_SHIELDING_PRICE");
        public final static Property IfNewLossFlag = new Property(7, String.class, "ifNewLossFlag", false, "IF_NEW_LOSS_FLAG");
        public final static Property AuditLossFlag = new Property(8, String.class, "auditLossFlag", false, "AUDIT_LOSS_FLAG");
        public final static Property RequestSourceCode = new Property(9, String.class, "requestSourceCode", false, "REQUEST_SOURCE_CODE");
        public final static Property RequestSourceName = new Property(10, String.class, "requestSourceName", false, "REQUEST_SOURCE_NAME");
        public final static Property OperatingTime = new Property(11, String.class, "operatingTime", false, "OPERATING_TIME");
        public final static Property ReturnURL = new Property(12, String.class, "returnURL", false, "RETURN_URL");
        public final static Property RefreshURL = new Property(13, String.class, "refreshURL", false, "REFRESH_URL");
        public final static Property DmgVhclId = new Property(14, String.class, "dmgVhclId", false, "DMG_VHCL_ID");
        public final static Property LossNo = new Property(15, String.class, "lossNo", false, "LOSS_NO");
        public final static Property ReportCode = new Property(16, String.class, "reportCode", false, "REPORT_CODE");
        public final static Property InsureVehicleName = new Property(17, String.class, "insureVehicleName", false, "INSURE_VEHICLE_NAME");
        public final static Property InsureVehicleCode = new Property(18, String.class, "insureVehicleCode", false, "INSURE_VEHICLE_CODE");
        public final static Property ComCode = new Property(19, String.class, "comCode", false, "COM_CODE");
        public final static Property Company = new Property(20, String.class, "company", false, "COMPANY");
        public final static Property BranchComCode = new Property(21, String.class, "branchComCode", false, "BRANCH_COM_CODE");
        public final static Property BranchComName = new Property(22, String.class, "branchComName", false, "BRANCH_COM_NAME");
        public final static Property HandlerCode = new Property(23, String.class, "handlerCode", false, "HANDLER_CODE");
        public final static Property HandlerName = new Property(24, String.class, "handlerName", false, "HANDLER_NAME");
        public final static Property IsSubjectVehicle = new Property(25, String.class, "isSubjectVehicle", false, "IS_SUBJECT_VEHICLE");
        public final static Property PlateNo = new Property(26, String.class, "plateNo", false, "PLATE_NO");
        public final static Property VinNo = new Property(27, String.class, "vinNo", false, "VIN_NO");
        public final static Property DriverName = new Property(28, String.class, "driverName", false, "DRIVER_NAME");
        public final static Property EnrolDate = new Property(29, String.class, "enrolDate", false, "ENROL_DATE");
        public final static Property MarkColor = new Property(30, String.class, "markColor", false, "MARK_COLOR");
        public final static Property EvalTypeCode = new Property(31, String.class, "evalTypeCode", false, "EVAL_TYPE_CODE");
        public final static Property Remark = new Property(32, String.class, "remark", false, "REMARK");
        public final static Property SalvageFee = new Property(33, double.class, "salvageFee", false, "SALVAGE_FEE");
        public final static Property SalvageFeeRemark = new Property(34, String.class, "salvageFeeRemark", false, "SALVAGE_FEE_REMARK");
        public final static Property EngineNo = new Property(35, String.class, "engineNo", false, "ENGINE_NO");
        public final static Property RepairFactoryID = new Property(36, String.class, "repairFactoryID", false, "REPAIR_FACTORY_ID");
        public final static Property RepairFactoryCode = new Property(37, String.class, "repairFactoryCode", false, "REPAIR_FACTORY_CODE");
        public final static Property RepairFactoryName = new Property(38, String.class, "repairFactoryName", false, "REPAIR_FACTORY_NAME");
        public final static Property RepairFactoryType = new Property(39, String.class, "repairFactoryType", false, "REPAIR_FACTORY_TYPE");
        public final static Property SelfEstiFlag = new Property(40, String.class, "selfEstiFlag", false, "SELF_ESTI_FLAG");
        public final static Property IsLawsuit = new Property(41, String.class, "isLawsuit", false, "IS_LAWSUIT");
        public final static Property SelfCompensation = new Property(42, String.class, "selfCompensation", false, "SELF_COMPENSATION");
        public final static Property LossItemCode = new Property(43, String.class, "lossItemCode", false, "LOSS_ITEM_CODE");
    }


    public EvalLossInfoDao(DaoConfig config) {
        super(config);
    }
    
    public EvalLossInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVAL_LOSS_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_CODE\" TEXT," + // 1: userCode
                "\"PASSWORD\" TEXT," + // 2: password
                "\"REQUEST_TYPE\" TEXT," + // 3: requestType
                "\"REQUEST_URL_FLAG\" TEXT," + // 4: requestUrlFlag
                "\"APP_TYPE\" TEXT," + // 5: appType
                "\"IS_SHIELDING_PRICE\" TEXT," + // 6: isShieldingPrice
                "\"IF_NEW_LOSS_FLAG\" TEXT," + // 7: ifNewLossFlag
                "\"AUDIT_LOSS_FLAG\" TEXT," + // 8: auditLossFlag
                "\"REQUEST_SOURCE_CODE\" TEXT," + // 9: requestSourceCode
                "\"REQUEST_SOURCE_NAME\" TEXT," + // 10: requestSourceName
                "\"OPERATING_TIME\" TEXT," + // 11: operatingTime
                "\"RETURN_URL\" TEXT," + // 12: returnURL
                "\"REFRESH_URL\" TEXT," + // 13: refreshURL
                "\"DMG_VHCL_ID\" TEXT," + // 14: dmgVhclId
                "\"LOSS_NO\" TEXT," + // 15: lossNo
                "\"REPORT_CODE\" TEXT," + // 16: reportCode
                "\"INSURE_VEHICLE_NAME\" TEXT," + // 17: insureVehicleName
                "\"INSURE_VEHICLE_CODE\" TEXT," + // 18: insureVehicleCode
                "\"COM_CODE\" TEXT," + // 19: comCode
                "\"COMPANY\" TEXT," + // 20: company
                "\"BRANCH_COM_CODE\" TEXT," + // 21: branchComCode
                "\"BRANCH_COM_NAME\" TEXT," + // 22: branchComName
                "\"HANDLER_CODE\" TEXT," + // 23: handlerCode
                "\"HANDLER_NAME\" TEXT," + // 24: handlerName
                "\"IS_SUBJECT_VEHICLE\" TEXT," + // 25: isSubjectVehicle
                "\"PLATE_NO\" TEXT," + // 26: plateNo
                "\"VIN_NO\" TEXT," + // 27: vinNo
                "\"DRIVER_NAME\" TEXT," + // 28: driverName
                "\"ENROL_DATE\" TEXT," + // 29: enrolDate
                "\"MARK_COLOR\" TEXT," + // 30: markColor
                "\"EVAL_TYPE_CODE\" TEXT," + // 31: evalTypeCode
                "\"REMARK\" TEXT," + // 32: remark
                "\"SALVAGE_FEE\" REAL NOT NULL ," + // 33: salvageFee
                "\"SALVAGE_FEE_REMARK\" TEXT," + // 34: salvageFeeRemark
                "\"ENGINE_NO\" TEXT," + // 35: engineNo
                "\"REPAIR_FACTORY_ID\" TEXT," + // 36: repairFactoryID
                "\"REPAIR_FACTORY_CODE\" TEXT," + // 37: repairFactoryCode
                "\"REPAIR_FACTORY_NAME\" TEXT," + // 38: repairFactoryName
                "\"REPAIR_FACTORY_TYPE\" TEXT," + // 39: repairFactoryType
                "\"SELF_ESTI_FLAG\" TEXT," + // 40: selfEstiFlag
                "\"IS_LAWSUIT\" TEXT," + // 41: isLawsuit
                "\"SELF_COMPENSATION\" TEXT," + // 42: selfCompensation
                "\"LOSS_ITEM_CODE\" TEXT);"); // 43: lossItemCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVAL_LOSS_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EvalLossInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(2, userCode);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String requestType = entity.getRequestType();
        if (requestType != null) {
            stmt.bindString(4, requestType);
        }
 
        String requestUrlFlag = entity.getRequestUrlFlag();
        if (requestUrlFlag != null) {
            stmt.bindString(5, requestUrlFlag);
        }
 
        String appType = entity.getAppType();
        if (appType != null) {
            stmt.bindString(6, appType);
        }
 
        String isShieldingPrice = entity.getIsShieldingPrice();
        if (isShieldingPrice != null) {
            stmt.bindString(7, isShieldingPrice);
        }
 
        String ifNewLossFlag = entity.getIfNewLossFlag();
        if (ifNewLossFlag != null) {
            stmt.bindString(8, ifNewLossFlag);
        }
 
        String auditLossFlag = entity.getAuditLossFlag();
        if (auditLossFlag != null) {
            stmt.bindString(9, auditLossFlag);
        }
 
        String requestSourceCode = entity.getRequestSourceCode();
        if (requestSourceCode != null) {
            stmt.bindString(10, requestSourceCode);
        }
 
        String requestSourceName = entity.getRequestSourceName();
        if (requestSourceName != null) {
            stmt.bindString(11, requestSourceName);
        }
 
        String operatingTime = entity.getOperatingTime();
        if (operatingTime != null) {
            stmt.bindString(12, operatingTime);
        }
 
        String returnURL = entity.getReturnURL();
        if (returnURL != null) {
            stmt.bindString(13, returnURL);
        }
 
        String refreshURL = entity.getRefreshURL();
        if (refreshURL != null) {
            stmt.bindString(14, refreshURL);
        }
 
        String dmgVhclId = entity.getDmgVhclId();
        if (dmgVhclId != null) {
            stmt.bindString(15, dmgVhclId);
        }
 
        String lossNo = entity.getLossNo();
        if (lossNo != null) {
            stmt.bindString(16, lossNo);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(17, reportCode);
        }
 
        String insureVehicleName = entity.getInsureVehicleName();
        if (insureVehicleName != null) {
            stmt.bindString(18, insureVehicleName);
        }
 
        String insureVehicleCode = entity.getInsureVehicleCode();
        if (insureVehicleCode != null) {
            stmt.bindString(19, insureVehicleCode);
        }
 
        String comCode = entity.getComCode();
        if (comCode != null) {
            stmt.bindString(20, comCode);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(21, company);
        }
 
        String branchComCode = entity.getBranchComCode();
        if (branchComCode != null) {
            stmt.bindString(22, branchComCode);
        }
 
        String branchComName = entity.getBranchComName();
        if (branchComName != null) {
            stmt.bindString(23, branchComName);
        }
 
        String handlerCode = entity.getHandlerCode();
        if (handlerCode != null) {
            stmt.bindString(24, handlerCode);
        }
 
        String handlerName = entity.getHandlerName();
        if (handlerName != null) {
            stmt.bindString(25, handlerName);
        }
 
        String isSubjectVehicle = entity.getIsSubjectVehicle();
        if (isSubjectVehicle != null) {
            stmt.bindString(26, isSubjectVehicle);
        }
 
        String plateNo = entity.getPlateNo();
        if (plateNo != null) {
            stmt.bindString(27, plateNo);
        }
 
        String vinNo = entity.getVinNo();
        if (vinNo != null) {
            stmt.bindString(28, vinNo);
        }
 
        String driverName = entity.getDriverName();
        if (driverName != null) {
            stmt.bindString(29, driverName);
        }
 
        String enrolDate = entity.getEnrolDate();
        if (enrolDate != null) {
            stmt.bindString(30, enrolDate);
        }
 
        String markColor = entity.getMarkColor();
        if (markColor != null) {
            stmt.bindString(31, markColor);
        }
 
        String evalTypeCode = entity.getEvalTypeCode();
        if (evalTypeCode != null) {
            stmt.bindString(32, evalTypeCode);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(33, remark);
        }
        stmt.bindDouble(34, entity.getSalvageFee());
 
        String salvageFeeRemark = entity.getSalvageFeeRemark();
        if (salvageFeeRemark != null) {
            stmt.bindString(35, salvageFeeRemark);
        }
 
        String engineNo = entity.getEngineNo();
        if (engineNo != null) {
            stmt.bindString(36, engineNo);
        }
 
        String repairFactoryID = entity.getRepairFactoryID();
        if (repairFactoryID != null) {
            stmt.bindString(37, repairFactoryID);
        }
 
        String repairFactoryCode = entity.getRepairFactoryCode();
        if (repairFactoryCode != null) {
            stmt.bindString(38, repairFactoryCode);
        }
 
        String repairFactoryName = entity.getRepairFactoryName();
        if (repairFactoryName != null) {
            stmt.bindString(39, repairFactoryName);
        }
 
        String repairFactoryType = entity.getRepairFactoryType();
        if (repairFactoryType != null) {
            stmt.bindString(40, repairFactoryType);
        }
 
        String selfEstiFlag = entity.getSelfEstiFlag();
        if (selfEstiFlag != null) {
            stmt.bindString(41, selfEstiFlag);
        }
 
        String isLawsuit = entity.getIsLawsuit();
        if (isLawsuit != null) {
            stmt.bindString(42, isLawsuit);
        }
 
        String selfCompensation = entity.getSelfCompensation();
        if (selfCompensation != null) {
            stmt.bindString(43, selfCompensation);
        }
 
        String lossItemCode = entity.getLossItemCode();
        if (lossItemCode != null) {
            stmt.bindString(44, lossItemCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EvalLossInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(2, userCode);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String requestType = entity.getRequestType();
        if (requestType != null) {
            stmt.bindString(4, requestType);
        }
 
        String requestUrlFlag = entity.getRequestUrlFlag();
        if (requestUrlFlag != null) {
            stmt.bindString(5, requestUrlFlag);
        }
 
        String appType = entity.getAppType();
        if (appType != null) {
            stmt.bindString(6, appType);
        }
 
        String isShieldingPrice = entity.getIsShieldingPrice();
        if (isShieldingPrice != null) {
            stmt.bindString(7, isShieldingPrice);
        }
 
        String ifNewLossFlag = entity.getIfNewLossFlag();
        if (ifNewLossFlag != null) {
            stmt.bindString(8, ifNewLossFlag);
        }
 
        String auditLossFlag = entity.getAuditLossFlag();
        if (auditLossFlag != null) {
            stmt.bindString(9, auditLossFlag);
        }
 
        String requestSourceCode = entity.getRequestSourceCode();
        if (requestSourceCode != null) {
            stmt.bindString(10, requestSourceCode);
        }
 
        String requestSourceName = entity.getRequestSourceName();
        if (requestSourceName != null) {
            stmt.bindString(11, requestSourceName);
        }
 
        String operatingTime = entity.getOperatingTime();
        if (operatingTime != null) {
            stmt.bindString(12, operatingTime);
        }
 
        String returnURL = entity.getReturnURL();
        if (returnURL != null) {
            stmt.bindString(13, returnURL);
        }
 
        String refreshURL = entity.getRefreshURL();
        if (refreshURL != null) {
            stmt.bindString(14, refreshURL);
        }
 
        String dmgVhclId = entity.getDmgVhclId();
        if (dmgVhclId != null) {
            stmt.bindString(15, dmgVhclId);
        }
 
        String lossNo = entity.getLossNo();
        if (lossNo != null) {
            stmt.bindString(16, lossNo);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(17, reportCode);
        }
 
        String insureVehicleName = entity.getInsureVehicleName();
        if (insureVehicleName != null) {
            stmt.bindString(18, insureVehicleName);
        }
 
        String insureVehicleCode = entity.getInsureVehicleCode();
        if (insureVehicleCode != null) {
            stmt.bindString(19, insureVehicleCode);
        }
 
        String comCode = entity.getComCode();
        if (comCode != null) {
            stmt.bindString(20, comCode);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(21, company);
        }
 
        String branchComCode = entity.getBranchComCode();
        if (branchComCode != null) {
            stmt.bindString(22, branchComCode);
        }
 
        String branchComName = entity.getBranchComName();
        if (branchComName != null) {
            stmt.bindString(23, branchComName);
        }
 
        String handlerCode = entity.getHandlerCode();
        if (handlerCode != null) {
            stmt.bindString(24, handlerCode);
        }
 
        String handlerName = entity.getHandlerName();
        if (handlerName != null) {
            stmt.bindString(25, handlerName);
        }
 
        String isSubjectVehicle = entity.getIsSubjectVehicle();
        if (isSubjectVehicle != null) {
            stmt.bindString(26, isSubjectVehicle);
        }
 
        String plateNo = entity.getPlateNo();
        if (plateNo != null) {
            stmt.bindString(27, plateNo);
        }
 
        String vinNo = entity.getVinNo();
        if (vinNo != null) {
            stmt.bindString(28, vinNo);
        }
 
        String driverName = entity.getDriverName();
        if (driverName != null) {
            stmt.bindString(29, driverName);
        }
 
        String enrolDate = entity.getEnrolDate();
        if (enrolDate != null) {
            stmt.bindString(30, enrolDate);
        }
 
        String markColor = entity.getMarkColor();
        if (markColor != null) {
            stmt.bindString(31, markColor);
        }
 
        String evalTypeCode = entity.getEvalTypeCode();
        if (evalTypeCode != null) {
            stmt.bindString(32, evalTypeCode);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(33, remark);
        }
        stmt.bindDouble(34, entity.getSalvageFee());
 
        String salvageFeeRemark = entity.getSalvageFeeRemark();
        if (salvageFeeRemark != null) {
            stmt.bindString(35, salvageFeeRemark);
        }
 
        String engineNo = entity.getEngineNo();
        if (engineNo != null) {
            stmt.bindString(36, engineNo);
        }
 
        String repairFactoryID = entity.getRepairFactoryID();
        if (repairFactoryID != null) {
            stmt.bindString(37, repairFactoryID);
        }
 
        String repairFactoryCode = entity.getRepairFactoryCode();
        if (repairFactoryCode != null) {
            stmt.bindString(38, repairFactoryCode);
        }
 
        String repairFactoryName = entity.getRepairFactoryName();
        if (repairFactoryName != null) {
            stmt.bindString(39, repairFactoryName);
        }
 
        String repairFactoryType = entity.getRepairFactoryType();
        if (repairFactoryType != null) {
            stmt.bindString(40, repairFactoryType);
        }
 
        String selfEstiFlag = entity.getSelfEstiFlag();
        if (selfEstiFlag != null) {
            stmt.bindString(41, selfEstiFlag);
        }
 
        String isLawsuit = entity.getIsLawsuit();
        if (isLawsuit != null) {
            stmt.bindString(42, isLawsuit);
        }
 
        String selfCompensation = entity.getSelfCompensation();
        if (selfCompensation != null) {
            stmt.bindString(43, selfCompensation);
        }
 
        String lossItemCode = entity.getLossItemCode();
        if (lossItemCode != null) {
            stmt.bindString(44, lossItemCode);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EvalLossInfo readEntity(Cursor cursor, int offset) {
        EvalLossInfo entity = new EvalLossInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // requestType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // requestUrlFlag
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // appType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // isShieldingPrice
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ifNewLossFlag
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // auditLossFlag
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // requestSourceCode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // requestSourceName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // operatingTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // returnURL
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // refreshURL
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // dmgVhclId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // lossNo
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // reportCode
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // insureVehicleName
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // insureVehicleCode
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // comCode
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // company
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // branchComCode
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // branchComName
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // handlerCode
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // handlerName
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // isSubjectVehicle
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // plateNo
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // vinNo
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // driverName
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // enrolDate
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // markColor
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // evalTypeCode
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // remark
            cursor.getDouble(offset + 33), // salvageFee
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // salvageFeeRemark
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // engineNo
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // repairFactoryID
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // repairFactoryCode
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // repairFactoryName
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // repairFactoryType
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // selfEstiFlag
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // isLawsuit
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // selfCompensation
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43) // lossItemCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EvalLossInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRequestType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRequestUrlFlag(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAppType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsShieldingPrice(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIfNewLossFlag(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAuditLossFlag(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRequestSourceCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRequestSourceName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOperatingTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setReturnURL(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRefreshURL(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDmgVhclId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLossNo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setReportCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setInsureVehicleName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setInsureVehicleCode(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setComCode(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCompany(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setBranchComCode(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setBranchComName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setHandlerCode(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setHandlerName(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setIsSubjectVehicle(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setPlateNo(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setVinNo(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setDriverName(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setEnrolDate(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setMarkColor(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setEvalTypeCode(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setRemark(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setSalvageFee(cursor.getDouble(offset + 33));
        entity.setSalvageFeeRemark(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setEngineNo(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setRepairFactoryID(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setRepairFactoryCode(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setRepairFactoryName(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setRepairFactoryType(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setSelfEstiFlag(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setIsLawsuit(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setSelfCompensation(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setLossItemCode(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EvalLossInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EvalLossInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EvalLossInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
