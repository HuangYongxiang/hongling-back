package com.hl.contract.table.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hl.contract.table.model.CargoMainInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARGO_MAIN_INFO".
*/
public class CargoMainInfoDao extends AbstractDao<CargoMainInfo, String> {

    public static final String TABLENAME = "CARGO_MAIN_INFO";

    /**
     * Properties of entity CargoMainInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property ReportCode = new Property(1, String.class, "reportCode", false, "REPORT_CODE");
        public final static Property FlowId = new Property(2, String.class, "flowId", false, "FLOW_ID");
        public final static Property EvalId = new Property(3, String.class, "evalId", false, "EVAL_ID");
        public final static Property LossNo = new Property(4, String.class, "lossNo", false, "LOSS_NO");
        public final static Property TaskType = new Property(5, String.class, "taskType", false, "TASK_TYPE");
        public final static Property TaskTypeCode = new Property(6, String.class, "taskTypeCode", false, "TASK_TYPE_CODE");
        public final static Property AccidentAreaCode = new Property(7, String.class, "accidentAreaCode", false, "ACCIDENT_AREA_CODE");
        public final static Property CreateBy = new Property(8, String.class, "createBy", false, "CREATE_BY");
        public final static Property CreateDate = new Property(9, String.class, "createDate", false, "CREATE_DATE");
        public final static Property UpdateBy = new Property(10, String.class, "updateBy", false, "UPDATE_BY");
        public final static Property UpdateDate = new Property(11, String.class, "updateDate", false, "UPDATE_DATE");
        public final static Property EvaluationPersonCode = new Property(12, String.class, "evaluationPersonCode", false, "EVALUATION_PERSON_CODE");
        public final static Property EvaluationPersonId = new Property(13, String.class, "evaluationPersonId", false, "EVALUATION_PERSON_ID");
        public final static Property EvaluationPersonName = new Property(14, String.class, "evaluationPersonName", false, "EVALUATION_PERSON_NAME");
        public final static Property ApprovePersonCode = new Property(15, String.class, "approvePersonCode", false, "APPROVE_PERSON_CODE");
        public final static Property ApprovePersonId = new Property(16, String.class, "approvePersonId", false, "APPROVE_PERSON_ID");
        public final static Property ApprovePersonName = new Property(17, String.class, "approvePersonName", false, "APPROVE_PERSON_NAME");
        public final static Property LinkName = new Property(18, String.class, "linkName", false, "LINK_NAME");
        public final static Property IdCardType = new Property(19, String.class, "idCardType", false, "ID_CARD_TYPE");
        public final static Property IdCardTypeCode = new Property(20, String.class, "idCardTypeCode", false, "ID_CARD_TYPE_CODE");
        public final static Property IdCardNo = new Property(21, String.class, "idCardNo", false, "ID_CARD_NO");
        public final static Property Telephone = new Property(22, String.class, "telephone", false, "TELEPHONE");
        public final static Property LossType = new Property(23, String.class, "lossType", false, "LOSS_TYPE");
        public final static Property LossTypeCode = new Property(24, String.class, "lossTypeCode", false, "LOSS_TYPE_CODE");
        public final static Property LossObjectName = new Property(25, String.class, "lossObjectName", false, "LOSS_OBJECT_NAME");
        public final static Property EvalDate = new Property(26, String.class, "evalDate", false, "EVAL_DATE");
        public final static Property EvalRemainsSum = new Property(27, String.class, "evalRemainsSum", false, "EVAL_REMAINS_SUM");
        public final static Property EvalItemSum = new Property(28, String.class, "evalItemSum", false, "EVAL_ITEM_SUM");
        public final static Property EvalForceSum = new Property(29, String.class, "evalForceSum", false, "EVAL_FORCE_SUM");
        public final static Property EvalSum = new Property(30, String.class, "evalSum", false, "EVAL_SUM");
        public final static Property EvalSumFirst = new Property(31, String.class, "evalSumFirst", false, "EVAL_SUM_FIRST");
        public final static Property ApproveRemainsSum = new Property(32, String.class, "approveRemainsSum", false, "APPROVE_REMAINS_SUM");
        public final static Property ApproveItemSum = new Property(33, String.class, "approveItemSum", false, "APPROVE_ITEM_SUM");
        public final static Property ApproveForceSum = new Property(34, String.class, "approveForceSum", false, "APPROVE_FORCE_SUM");
        public final static Property ApproveSum = new Property(35, String.class, "approveSum", false, "APPROVE_SUM");
        public final static Property EvalNotion = new Property(36, String.class, "evalNotion", false, "EVAL_NOTION");
        public final static Property RiskCode = new Property(37, String.class, "riskCode", false, "RISK_CODE");
        public final static Property RiskName = new Property(38, String.class, "riskName", false, "RISK_NAME");
        public final static Property ItemCode = new Property(39, String.class, "itemCode", false, "ITEM_CODE");
        public final static Property ItemName = new Property(40, String.class, "itemName", false, "ITEM_NAME");
        public final static Property CargoDuty = new Property(41, String.class, "cargoDuty", false, "CARGO_DUTY");
        public final static Property CargoDutyCode = new Property(42, String.class, "cargoDutyCode", false, "CARGO_DUTY_CODE");
        public final static Property CargoDutyPercent = new Property(43, String.class, "cargoDutyPercent", false, "CARGO_DUTY_PERCENT");
        public final static Property SubrogationFlag = new Property(44, String.class, "subrogationFlag", false, "SUBROGATION_FLAG");
        public final static Property WhetherLawsuit = new Property(45, String.class, "whetherLawsuit", false, "WHETHER_LAWSUIT");
        public final static Property FitBackPersonId = new Property(46, String.class, "fitBackPersonId", false, "FIT_BACK_PERSON_ID");
        public final static Property FitBackPersonName = new Property(47, String.class, "fitBackPersonName", false, "FIT_BACK_PERSON_NAME");
        public final static Property ResurveyPersonId = new Property(48, String.class, "resurveyPersonId", false, "RESURVEY_PERSON_ID");
        public final static Property ResurveyPersonName = new Property(49, String.class, "resurveyPersonName", false, "RESURVEY_PERSON_NAME");
        public final static Property RecheckFitBackFlag = new Property(50, String.class, "recheckFitBackFlag", false, "RECHECK_FIT_BACK_FLAG");
        public final static Property RecheckRemainsSum = new Property(51, String.class, "recheckRemainsSum", false, "RECHECK_REMAINS_SUM");
        public final static Property RecheckItemSum = new Property(52, String.class, "recheckItemSum", false, "RECHECK_ITEM_SUM");
        public final static Property RecheckSum = new Property(53, String.class, "recheckSum", false, "RECHECK_SUM");
    }


    public CargoMainInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CargoMainInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARGO_MAIN_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"REPORT_CODE\" TEXT," + // 1: reportCode
                "\"FLOW_ID\" TEXT," + // 2: flowId
                "\"EVAL_ID\" TEXT," + // 3: evalId
                "\"LOSS_NO\" TEXT," + // 4: lossNo
                "\"TASK_TYPE\" TEXT," + // 5: taskType
                "\"TASK_TYPE_CODE\" TEXT," + // 6: taskTypeCode
                "\"ACCIDENT_AREA_CODE\" TEXT," + // 7: accidentAreaCode
                "\"CREATE_BY\" TEXT," + // 8: createBy
                "\"CREATE_DATE\" TEXT," + // 9: createDate
                "\"UPDATE_BY\" TEXT," + // 10: updateBy
                "\"UPDATE_DATE\" TEXT," + // 11: updateDate
                "\"EVALUATION_PERSON_CODE\" TEXT," + // 12: evaluationPersonCode
                "\"EVALUATION_PERSON_ID\" TEXT," + // 13: evaluationPersonId
                "\"EVALUATION_PERSON_NAME\" TEXT," + // 14: evaluationPersonName
                "\"APPROVE_PERSON_CODE\" TEXT," + // 15: approvePersonCode
                "\"APPROVE_PERSON_ID\" TEXT," + // 16: approvePersonId
                "\"APPROVE_PERSON_NAME\" TEXT," + // 17: approvePersonName
                "\"LINK_NAME\" TEXT," + // 18: linkName
                "\"ID_CARD_TYPE\" TEXT," + // 19: idCardType
                "\"ID_CARD_TYPE_CODE\" TEXT," + // 20: idCardTypeCode
                "\"ID_CARD_NO\" TEXT," + // 21: idCardNo
                "\"TELEPHONE\" TEXT," + // 22: telephone
                "\"LOSS_TYPE\" TEXT," + // 23: lossType
                "\"LOSS_TYPE_CODE\" TEXT," + // 24: lossTypeCode
                "\"LOSS_OBJECT_NAME\" TEXT," + // 25: lossObjectName
                "\"EVAL_DATE\" TEXT," + // 26: evalDate
                "\"EVAL_REMAINS_SUM\" TEXT," + // 27: evalRemainsSum
                "\"EVAL_ITEM_SUM\" TEXT," + // 28: evalItemSum
                "\"EVAL_FORCE_SUM\" TEXT," + // 29: evalForceSum
                "\"EVAL_SUM\" TEXT," + // 30: evalSum
                "\"EVAL_SUM_FIRST\" TEXT," + // 31: evalSumFirst
                "\"APPROVE_REMAINS_SUM\" TEXT," + // 32: approveRemainsSum
                "\"APPROVE_ITEM_SUM\" TEXT," + // 33: approveItemSum
                "\"APPROVE_FORCE_SUM\" TEXT," + // 34: approveForceSum
                "\"APPROVE_SUM\" TEXT," + // 35: approveSum
                "\"EVAL_NOTION\" TEXT," + // 36: evalNotion
                "\"RISK_CODE\" TEXT," + // 37: riskCode
                "\"RISK_NAME\" TEXT," + // 38: riskName
                "\"ITEM_CODE\" TEXT," + // 39: itemCode
                "\"ITEM_NAME\" TEXT," + // 40: itemName
                "\"CARGO_DUTY\" TEXT," + // 41: cargoDuty
                "\"CARGO_DUTY_CODE\" TEXT," + // 42: cargoDutyCode
                "\"CARGO_DUTY_PERCENT\" TEXT," + // 43: cargoDutyPercent
                "\"SUBROGATION_FLAG\" TEXT," + // 44: subrogationFlag
                "\"WHETHER_LAWSUIT\" TEXT," + // 45: whetherLawsuit
                "\"FIT_BACK_PERSON_ID\" TEXT," + // 46: fitBackPersonId
                "\"FIT_BACK_PERSON_NAME\" TEXT," + // 47: fitBackPersonName
                "\"RESURVEY_PERSON_ID\" TEXT," + // 48: resurveyPersonId
                "\"RESURVEY_PERSON_NAME\" TEXT," + // 49: resurveyPersonName
                "\"RECHECK_FIT_BACK_FLAG\" TEXT," + // 50: recheckFitBackFlag
                "\"RECHECK_REMAINS_SUM\" TEXT," + // 51: recheckRemainsSum
                "\"RECHECK_ITEM_SUM\" TEXT," + // 52: recheckItemSum
                "\"RECHECK_SUM\" TEXT);"); // 53: recheckSum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARGO_MAIN_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CargoMainInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(2, reportCode);
        }
 
        String flowId = entity.getFlowId();
        if (flowId != null) {
            stmt.bindString(3, flowId);
        }
 
        String evalId = entity.getEvalId();
        if (evalId != null) {
            stmt.bindString(4, evalId);
        }
 
        String lossNo = entity.getLossNo();
        if (lossNo != null) {
            stmt.bindString(5, lossNo);
        }
 
        String taskType = entity.getTaskType();
        if (taskType != null) {
            stmt.bindString(6, taskType);
        }
 
        String taskTypeCode = entity.getTaskTypeCode();
        if (taskTypeCode != null) {
            stmt.bindString(7, taskTypeCode);
        }
 
        String accidentAreaCode = entity.getAccidentAreaCode();
        if (accidentAreaCode != null) {
            stmt.bindString(8, accidentAreaCode);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(9, createBy);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(10, createDate);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(11, updateBy);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(12, updateDate);
        }
 
        String evaluationPersonCode = entity.getEvaluationPersonCode();
        if (evaluationPersonCode != null) {
            stmt.bindString(13, evaluationPersonCode);
        }
 
        String evaluationPersonId = entity.getEvaluationPersonId();
        if (evaluationPersonId != null) {
            stmt.bindString(14, evaluationPersonId);
        }
 
        String evaluationPersonName = entity.getEvaluationPersonName();
        if (evaluationPersonName != null) {
            stmt.bindString(15, evaluationPersonName);
        }
 
        String approvePersonCode = entity.getApprovePersonCode();
        if (approvePersonCode != null) {
            stmt.bindString(16, approvePersonCode);
        }
 
        String approvePersonId = entity.getApprovePersonId();
        if (approvePersonId != null) {
            stmt.bindString(17, approvePersonId);
        }
 
        String approvePersonName = entity.getApprovePersonName();
        if (approvePersonName != null) {
            stmt.bindString(18, approvePersonName);
        }
 
        String linkName = entity.getLinkName();
        if (linkName != null) {
            stmt.bindString(19, linkName);
        }
 
        String idCardType = entity.getIdCardType();
        if (idCardType != null) {
            stmt.bindString(20, idCardType);
        }
 
        String idCardTypeCode = entity.getIdCardTypeCode();
        if (idCardTypeCode != null) {
            stmt.bindString(21, idCardTypeCode);
        }
 
        String idCardNo = entity.getIdCardNo();
        if (idCardNo != null) {
            stmt.bindString(22, idCardNo);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(23, telephone);
        }
 
        String lossType = entity.getLossType();
        if (lossType != null) {
            stmt.bindString(24, lossType);
        }
 
        String lossTypeCode = entity.getLossTypeCode();
        if (lossTypeCode != null) {
            stmt.bindString(25, lossTypeCode);
        }
 
        String lossObjectName = entity.getLossObjectName();
        if (lossObjectName != null) {
            stmt.bindString(26, lossObjectName);
        }
 
        String evalDate = entity.getEvalDate();
        if (evalDate != null) {
            stmt.bindString(27, evalDate);
        }
 
        String evalRemainsSum = entity.getEvalRemainsSum();
        if (evalRemainsSum != null) {
            stmt.bindString(28, evalRemainsSum);
        }
 
        String evalItemSum = entity.getEvalItemSum();
        if (evalItemSum != null) {
            stmt.bindString(29, evalItemSum);
        }
 
        String evalForceSum = entity.getEvalForceSum();
        if (evalForceSum != null) {
            stmt.bindString(30, evalForceSum);
        }
 
        String evalSum = entity.getEvalSum();
        if (evalSum != null) {
            stmt.bindString(31, evalSum);
        }
 
        String evalSumFirst = entity.getEvalSumFirst();
        if (evalSumFirst != null) {
            stmt.bindString(32, evalSumFirst);
        }
 
        String approveRemainsSum = entity.getApproveRemainsSum();
        if (approveRemainsSum != null) {
            stmt.bindString(33, approveRemainsSum);
        }
 
        String approveItemSum = entity.getApproveItemSum();
        if (approveItemSum != null) {
            stmt.bindString(34, approveItemSum);
        }
 
        String approveForceSum = entity.getApproveForceSum();
        if (approveForceSum != null) {
            stmt.bindString(35, approveForceSum);
        }
 
        String approveSum = entity.getApproveSum();
        if (approveSum != null) {
            stmt.bindString(36, approveSum);
        }
 
        String evalNotion = entity.getEvalNotion();
        if (evalNotion != null) {
            stmt.bindString(37, evalNotion);
        }
 
        String riskCode = entity.getRiskCode();
        if (riskCode != null) {
            stmt.bindString(38, riskCode);
        }
 
        String riskName = entity.getRiskName();
        if (riskName != null) {
            stmt.bindString(39, riskName);
        }
 
        String itemCode = entity.getItemCode();
        if (itemCode != null) {
            stmt.bindString(40, itemCode);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(41, itemName);
        }
 
        String cargoDuty = entity.getCargoDuty();
        if (cargoDuty != null) {
            stmt.bindString(42, cargoDuty);
        }
 
        String cargoDutyCode = entity.getCargoDutyCode();
        if (cargoDutyCode != null) {
            stmt.bindString(43, cargoDutyCode);
        }
 
        String cargoDutyPercent = entity.getCargoDutyPercent();
        if (cargoDutyPercent != null) {
            stmt.bindString(44, cargoDutyPercent);
        }
 
        String subrogationFlag = entity.getSubrogationFlag();
        if (subrogationFlag != null) {
            stmt.bindString(45, subrogationFlag);
        }
 
        String whetherLawsuit = entity.getWhetherLawsuit();
        if (whetherLawsuit != null) {
            stmt.bindString(46, whetherLawsuit);
        }
 
        String fitBackPersonId = entity.getFitBackPersonId();
        if (fitBackPersonId != null) {
            stmt.bindString(47, fitBackPersonId);
        }
 
        String fitBackPersonName = entity.getFitBackPersonName();
        if (fitBackPersonName != null) {
            stmt.bindString(48, fitBackPersonName);
        }
 
        String resurveyPersonId = entity.getResurveyPersonId();
        if (resurveyPersonId != null) {
            stmt.bindString(49, resurveyPersonId);
        }
 
        String resurveyPersonName = entity.getResurveyPersonName();
        if (resurveyPersonName != null) {
            stmt.bindString(50, resurveyPersonName);
        }
 
        String recheckFitBackFlag = entity.getRecheckFitBackFlag();
        if (recheckFitBackFlag != null) {
            stmt.bindString(51, recheckFitBackFlag);
        }
 
        String recheckRemainsSum = entity.getRecheckRemainsSum();
        if (recheckRemainsSum != null) {
            stmt.bindString(52, recheckRemainsSum);
        }
 
        String recheckItemSum = entity.getRecheckItemSum();
        if (recheckItemSum != null) {
            stmt.bindString(53, recheckItemSum);
        }
 
        String recheckSum = entity.getRecheckSum();
        if (recheckSum != null) {
            stmt.bindString(54, recheckSum);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CargoMainInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(2, reportCode);
        }
 
        String flowId = entity.getFlowId();
        if (flowId != null) {
            stmt.bindString(3, flowId);
        }
 
        String evalId = entity.getEvalId();
        if (evalId != null) {
            stmt.bindString(4, evalId);
        }
 
        String lossNo = entity.getLossNo();
        if (lossNo != null) {
            stmt.bindString(5, lossNo);
        }
 
        String taskType = entity.getTaskType();
        if (taskType != null) {
            stmt.bindString(6, taskType);
        }
 
        String taskTypeCode = entity.getTaskTypeCode();
        if (taskTypeCode != null) {
            stmt.bindString(7, taskTypeCode);
        }
 
        String accidentAreaCode = entity.getAccidentAreaCode();
        if (accidentAreaCode != null) {
            stmt.bindString(8, accidentAreaCode);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(9, createBy);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(10, createDate);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(11, updateBy);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(12, updateDate);
        }
 
        String evaluationPersonCode = entity.getEvaluationPersonCode();
        if (evaluationPersonCode != null) {
            stmt.bindString(13, evaluationPersonCode);
        }
 
        String evaluationPersonId = entity.getEvaluationPersonId();
        if (evaluationPersonId != null) {
            stmt.bindString(14, evaluationPersonId);
        }
 
        String evaluationPersonName = entity.getEvaluationPersonName();
        if (evaluationPersonName != null) {
            stmt.bindString(15, evaluationPersonName);
        }
 
        String approvePersonCode = entity.getApprovePersonCode();
        if (approvePersonCode != null) {
            stmt.bindString(16, approvePersonCode);
        }
 
        String approvePersonId = entity.getApprovePersonId();
        if (approvePersonId != null) {
            stmt.bindString(17, approvePersonId);
        }
 
        String approvePersonName = entity.getApprovePersonName();
        if (approvePersonName != null) {
            stmt.bindString(18, approvePersonName);
        }
 
        String linkName = entity.getLinkName();
        if (linkName != null) {
            stmt.bindString(19, linkName);
        }
 
        String idCardType = entity.getIdCardType();
        if (idCardType != null) {
            stmt.bindString(20, idCardType);
        }
 
        String idCardTypeCode = entity.getIdCardTypeCode();
        if (idCardTypeCode != null) {
            stmt.bindString(21, idCardTypeCode);
        }
 
        String idCardNo = entity.getIdCardNo();
        if (idCardNo != null) {
            stmt.bindString(22, idCardNo);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(23, telephone);
        }
 
        String lossType = entity.getLossType();
        if (lossType != null) {
            stmt.bindString(24, lossType);
        }
 
        String lossTypeCode = entity.getLossTypeCode();
        if (lossTypeCode != null) {
            stmt.bindString(25, lossTypeCode);
        }
 
        String lossObjectName = entity.getLossObjectName();
        if (lossObjectName != null) {
            stmt.bindString(26, lossObjectName);
        }
 
        String evalDate = entity.getEvalDate();
        if (evalDate != null) {
            stmt.bindString(27, evalDate);
        }
 
        String evalRemainsSum = entity.getEvalRemainsSum();
        if (evalRemainsSum != null) {
            stmt.bindString(28, evalRemainsSum);
        }
 
        String evalItemSum = entity.getEvalItemSum();
        if (evalItemSum != null) {
            stmt.bindString(29, evalItemSum);
        }
 
        String evalForceSum = entity.getEvalForceSum();
        if (evalForceSum != null) {
            stmt.bindString(30, evalForceSum);
        }
 
        String evalSum = entity.getEvalSum();
        if (evalSum != null) {
            stmt.bindString(31, evalSum);
        }
 
        String evalSumFirst = entity.getEvalSumFirst();
        if (evalSumFirst != null) {
            stmt.bindString(32, evalSumFirst);
        }
 
        String approveRemainsSum = entity.getApproveRemainsSum();
        if (approveRemainsSum != null) {
            stmt.bindString(33, approveRemainsSum);
        }
 
        String approveItemSum = entity.getApproveItemSum();
        if (approveItemSum != null) {
            stmt.bindString(34, approveItemSum);
        }
 
        String approveForceSum = entity.getApproveForceSum();
        if (approveForceSum != null) {
            stmt.bindString(35, approveForceSum);
        }
 
        String approveSum = entity.getApproveSum();
        if (approveSum != null) {
            stmt.bindString(36, approveSum);
        }
 
        String evalNotion = entity.getEvalNotion();
        if (evalNotion != null) {
            stmt.bindString(37, evalNotion);
        }
 
        String riskCode = entity.getRiskCode();
        if (riskCode != null) {
            stmt.bindString(38, riskCode);
        }
 
        String riskName = entity.getRiskName();
        if (riskName != null) {
            stmt.bindString(39, riskName);
        }
 
        String itemCode = entity.getItemCode();
        if (itemCode != null) {
            stmt.bindString(40, itemCode);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(41, itemName);
        }
 
        String cargoDuty = entity.getCargoDuty();
        if (cargoDuty != null) {
            stmt.bindString(42, cargoDuty);
        }
 
        String cargoDutyCode = entity.getCargoDutyCode();
        if (cargoDutyCode != null) {
            stmt.bindString(43, cargoDutyCode);
        }
 
        String cargoDutyPercent = entity.getCargoDutyPercent();
        if (cargoDutyPercent != null) {
            stmt.bindString(44, cargoDutyPercent);
        }
 
        String subrogationFlag = entity.getSubrogationFlag();
        if (subrogationFlag != null) {
            stmt.bindString(45, subrogationFlag);
        }
 
        String whetherLawsuit = entity.getWhetherLawsuit();
        if (whetherLawsuit != null) {
            stmt.bindString(46, whetherLawsuit);
        }
 
        String fitBackPersonId = entity.getFitBackPersonId();
        if (fitBackPersonId != null) {
            stmt.bindString(47, fitBackPersonId);
        }
 
        String fitBackPersonName = entity.getFitBackPersonName();
        if (fitBackPersonName != null) {
            stmt.bindString(48, fitBackPersonName);
        }
 
        String resurveyPersonId = entity.getResurveyPersonId();
        if (resurveyPersonId != null) {
            stmt.bindString(49, resurveyPersonId);
        }
 
        String resurveyPersonName = entity.getResurveyPersonName();
        if (resurveyPersonName != null) {
            stmt.bindString(50, resurveyPersonName);
        }
 
        String recheckFitBackFlag = entity.getRecheckFitBackFlag();
        if (recheckFitBackFlag != null) {
            stmt.bindString(51, recheckFitBackFlag);
        }
 
        String recheckRemainsSum = entity.getRecheckRemainsSum();
        if (recheckRemainsSum != null) {
            stmt.bindString(52, recheckRemainsSum);
        }
 
        String recheckItemSum = entity.getRecheckItemSum();
        if (recheckItemSum != null) {
            stmt.bindString(53, recheckItemSum);
        }
 
        String recheckSum = entity.getRecheckSum();
        if (recheckSum != null) {
            stmt.bindString(54, recheckSum);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CargoMainInfo readEntity(Cursor cursor, int offset) {
        CargoMainInfo entity = new CargoMainInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // reportCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // flowId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // evalId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lossNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // taskType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // taskTypeCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // accidentAreaCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // createBy
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // createDate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // updateBy
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // updateDate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // evaluationPersonCode
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // evaluationPersonId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // evaluationPersonName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // approvePersonCode
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // approvePersonId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // approvePersonName
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // linkName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // idCardType
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // idCardTypeCode
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // idCardNo
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // telephone
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // lossType
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // lossTypeCode
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // lossObjectName
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // evalDate
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // evalRemainsSum
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // evalItemSum
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // evalForceSum
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // evalSum
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // evalSumFirst
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // approveRemainsSum
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // approveItemSum
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // approveForceSum
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // approveSum
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // evalNotion
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // riskCode
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // riskName
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // itemCode
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // itemName
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // cargoDuty
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // cargoDutyCode
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // cargoDutyPercent
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // subrogationFlag
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // whetherLawsuit
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // fitBackPersonId
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // fitBackPersonName
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // resurveyPersonId
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // resurveyPersonName
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // recheckFitBackFlag
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // recheckRemainsSum
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // recheckItemSum
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53) // recheckSum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CargoMainInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setReportCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFlowId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEvalId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLossNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTaskType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTaskTypeCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAccidentAreaCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreateBy(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdateBy(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUpdateDate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEvaluationPersonCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEvaluationPersonId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setEvaluationPersonName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setApprovePersonCode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setApprovePersonId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setApprovePersonName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLinkName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIdCardType(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIdCardTypeCode(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setIdCardNo(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setTelephone(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setLossType(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setLossTypeCode(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setLossObjectName(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setEvalDate(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setEvalRemainsSum(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setEvalItemSum(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setEvalForceSum(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setEvalSum(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setEvalSumFirst(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setApproveRemainsSum(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setApproveItemSum(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setApproveForceSum(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setApproveSum(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setEvalNotion(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setRiskCode(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setRiskName(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setItemCode(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setItemName(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setCargoDuty(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setCargoDutyCode(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setCargoDutyPercent(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setSubrogationFlag(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setWhetherLawsuit(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setFitBackPersonId(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setFitBackPersonName(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setResurveyPersonId(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setResurveyPersonName(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setRecheckFitBackFlag(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setRecheckRemainsSum(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setRecheckItemSum(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setRecheckSum(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CargoMainInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(CargoMainInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CargoMainInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
