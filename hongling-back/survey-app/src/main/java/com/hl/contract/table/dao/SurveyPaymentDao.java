package com.hl.contract.table.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hl.contract.table.model.SurveyPayment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SURVEY_PAYMENT".
*/
public class SurveyPaymentDao extends AbstractDao<SurveyPayment, String> {

    public static final String TABLENAME = "SURVEY_PAYMENT";

    /**
     * Properties of entity SurveyPayment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property ReportCode = new Property(1, String.class, "reportCode", false, "REPORT_CODE");
        public final static Property FlowId = new Property(2, String.class, "flowId", false, "FLOW_ID");
        public final static Property ClaimNo = new Property(3, String.class, "claimNo", false, "CLAIM_NO");
        public final static Property PolicyCode = new Property(4, String.class, "policyCode", false, "POLICY_CODE");
        public final static Property ClaimTimes = new Property(5, String.class, "claimTimes", false, "CLAIM_TIMES");
        public final static Property EditTimes = new Property(6, String.class, "editTimes", false, "EDIT_TIMES");
        public final static Property PayType = new Property(7, String.class, "payType", false, "PAY_TYPE");
        public final static Property PayTypeCode = new Property(8, String.class, "payTypeCode", false, "PAY_TYPE_CODE");
        public final static Property CustomerType = new Property(9, String.class, "customerType", false, "CUSTOMER_TYPE");
        public final static Property CustomerTypeCode = new Property(10, String.class, "customerTypeCode", false, "CUSTOMER_TYPE_CODE");
        public final static Property CustomerName = new Property(11, String.class, "customerName", false, "CUSTOMER_NAME");
        public final static Property BankProvince = new Property(12, String.class, "bankProvince", false, "BANK_PROVINCE");
        public final static Property BankCity = new Property(13, String.class, "bankCity", false, "BANK_CITY");
        public final static Property BankCounty = new Property(14, String.class, "bankCounty", false, "BANK_COUNTY");
        public final static Property BankType = new Property(15, String.class, "bankType", false, "BANK_TYPE");
        public final static Property BankTypeCode = new Property(16, String.class, "bankTypeCode", false, "BANK_TYPE_CODE");
        public final static Property BankNetName = new Property(17, String.class, "bankNetName", false, "BANK_NET_NAME");
        public final static Property BankNetCode = new Property(18, String.class, "bankNetCode", false, "BANK_NET_CODE");
        public final static Property AccountType = new Property(19, String.class, "accountType", false, "ACCOUNT_TYPE");
        public final static Property AccountTypeCode = new Property(20, String.class, "accountTypeCode", false, "ACCOUNT_TYPE_CODE");
        public final static Property AccountNo = new Property(21, String.class, "accountNo", false, "ACCOUNT_NO");
        public final static Property Relation = new Property(22, String.class, "relation", false, "RELATION");
        public final static Property RelationCode = new Property(23, String.class, "relationCode", false, "RELATION_CODE");
        public final static Property CardType = new Property(24, String.class, "cardType", false, "CARD_TYPE");
        public final static Property CardTypeCode = new Property(25, String.class, "cardTypeCode", false, "CARD_TYPE_CODE");
        public final static Property IdCardType = new Property(26, String.class, "idCardType", false, "ID_CARD_TYPE");
        public final static Property IdCardTypeCode = new Property(27, String.class, "idCardTypeCode", false, "ID_CARD_TYPE_CODE");
        public final static Property IdCardNo = new Property(28, String.class, "idCardNo", false, "ID_CARD_NO");
        public final static Property PaySum = new Property(29, String.class, "paySum", false, "PAY_SUM");
        public final static Property MobileNo = new Property(30, String.class, "mobileNo", false, "MOBILE_NO");
        public final static Property IsSendMsg = new Property(31, String.class, "isSendMsg", false, "IS_SEND_MSG");
        public final static Property Remark = new Property(32, String.class, "remark", false, "REMARK");
        public final static Property MoneyType = new Property(33, String.class, "moneyType", false, "MONEY_TYPE");
        public final static Property MoneyTypeCode = new Property(34, String.class, "moneyTypeCode", false, "MONEY_TYPE_CODE");
        public final static Property ExceptMsg = new Property(35, String.class, "exceptMsg", false, "EXCEPT_MSG");
        public final static Property RepairfacPayFlag = new Property(36, String.class, "repairfacPayFlag", false, "REPAIRFAC_PAY_FLAG");
        public final static Property AdditionalFlag = new Property(37, String.class, "additionalFlag", false, "ADDITIONAL_FLAG");
        public final static Property SerialNo = new Property(38, Integer.class, "serialNo", false, "SERIAL_NO");
    }


    public SurveyPaymentDao(DaoConfig config) {
        super(config);
    }
    
    public SurveyPaymentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SURVEY_PAYMENT\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"REPORT_CODE\" TEXT," + // 1: reportCode
                "\"FLOW_ID\" TEXT," + // 2: flowId
                "\"CLAIM_NO\" TEXT," + // 3: claimNo
                "\"POLICY_CODE\" TEXT," + // 4: policyCode
                "\"CLAIM_TIMES\" TEXT," + // 5: claimTimes
                "\"EDIT_TIMES\" TEXT," + // 6: editTimes
                "\"PAY_TYPE\" TEXT," + // 7: payType
                "\"PAY_TYPE_CODE\" TEXT," + // 8: payTypeCode
                "\"CUSTOMER_TYPE\" TEXT," + // 9: customerType
                "\"CUSTOMER_TYPE_CODE\" TEXT," + // 10: customerTypeCode
                "\"CUSTOMER_NAME\" TEXT," + // 11: customerName
                "\"BANK_PROVINCE\" TEXT," + // 12: bankProvince
                "\"BANK_CITY\" TEXT," + // 13: bankCity
                "\"BANK_COUNTY\" TEXT," + // 14: bankCounty
                "\"BANK_TYPE\" TEXT," + // 15: bankType
                "\"BANK_TYPE_CODE\" TEXT," + // 16: bankTypeCode
                "\"BANK_NET_NAME\" TEXT," + // 17: bankNetName
                "\"BANK_NET_CODE\" TEXT," + // 18: bankNetCode
                "\"ACCOUNT_TYPE\" TEXT," + // 19: accountType
                "\"ACCOUNT_TYPE_CODE\" TEXT," + // 20: accountTypeCode
                "\"ACCOUNT_NO\" TEXT," + // 21: accountNo
                "\"RELATION\" TEXT," + // 22: relation
                "\"RELATION_CODE\" TEXT," + // 23: relationCode
                "\"CARD_TYPE\" TEXT," + // 24: cardType
                "\"CARD_TYPE_CODE\" TEXT," + // 25: cardTypeCode
                "\"ID_CARD_TYPE\" TEXT," + // 26: idCardType
                "\"ID_CARD_TYPE_CODE\" TEXT," + // 27: idCardTypeCode
                "\"ID_CARD_NO\" TEXT," + // 28: idCardNo
                "\"PAY_SUM\" TEXT," + // 29: paySum
                "\"MOBILE_NO\" TEXT," + // 30: mobileNo
                "\"IS_SEND_MSG\" TEXT," + // 31: isSendMsg
                "\"REMARK\" TEXT," + // 32: remark
                "\"MONEY_TYPE\" TEXT," + // 33: moneyType
                "\"MONEY_TYPE_CODE\" TEXT," + // 34: moneyTypeCode
                "\"EXCEPT_MSG\" TEXT," + // 35: exceptMsg
                "\"REPAIRFAC_PAY_FLAG\" TEXT," + // 36: repairfacPayFlag
                "\"ADDITIONAL_FLAG\" TEXT," + // 37: additionalFlag
                "\"SERIAL_NO\" INTEGER);"); // 38: serialNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SURVEY_PAYMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SurveyPayment entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(2, reportCode);
        }
 
        String flowId = entity.getFlowId();
        if (flowId != null) {
            stmt.bindString(3, flowId);
        }
 
        String claimNo = entity.getClaimNo();
        if (claimNo != null) {
            stmt.bindString(4, claimNo);
        }
 
        String policyCode = entity.getPolicyCode();
        if (policyCode != null) {
            stmt.bindString(5, policyCode);
        }
 
        String claimTimes = entity.getClaimTimes();
        if (claimTimes != null) {
            stmt.bindString(6, claimTimes);
        }
 
        String editTimes = entity.getEditTimes();
        if (editTimes != null) {
            stmt.bindString(7, editTimes);
        }
 
        String payType = entity.getPayType();
        if (payType != null) {
            stmt.bindString(8, payType);
        }
 
        String payTypeCode = entity.getPayTypeCode();
        if (payTypeCode != null) {
            stmt.bindString(9, payTypeCode);
        }
 
        String customerType = entity.getCustomerType();
        if (customerType != null) {
            stmt.bindString(10, customerType);
        }
 
        String customerTypeCode = entity.getCustomerTypeCode();
        if (customerTypeCode != null) {
            stmt.bindString(11, customerTypeCode);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(12, customerName);
        }
 
        String bankProvince = entity.getBankProvince();
        if (bankProvince != null) {
            stmt.bindString(13, bankProvince);
        }
 
        String bankCity = entity.getBankCity();
        if (bankCity != null) {
            stmt.bindString(14, bankCity);
        }
 
        String bankCounty = entity.getBankCounty();
        if (bankCounty != null) {
            stmt.bindString(15, bankCounty);
        }
 
        String bankType = entity.getBankType();
        if (bankType != null) {
            stmt.bindString(16, bankType);
        }
 
        String bankTypeCode = entity.getBankTypeCode();
        if (bankTypeCode != null) {
            stmt.bindString(17, bankTypeCode);
        }
 
        String bankNetName = entity.getBankNetName();
        if (bankNetName != null) {
            stmt.bindString(18, bankNetName);
        }
 
        String bankNetCode = entity.getBankNetCode();
        if (bankNetCode != null) {
            stmt.bindString(19, bankNetCode);
        }
 
        String accountType = entity.getAccountType();
        if (accountType != null) {
            stmt.bindString(20, accountType);
        }
 
        String accountTypeCode = entity.getAccountTypeCode();
        if (accountTypeCode != null) {
            stmt.bindString(21, accountTypeCode);
        }
 
        String accountNo = entity.getAccountNo();
        if (accountNo != null) {
            stmt.bindString(22, accountNo);
        }
 
        String relation = entity.getRelation();
        if (relation != null) {
            stmt.bindString(23, relation);
        }
 
        String relationCode = entity.getRelationCode();
        if (relationCode != null) {
            stmt.bindString(24, relationCode);
        }
 
        String cardType = entity.getCardType();
        if (cardType != null) {
            stmt.bindString(25, cardType);
        }
 
        String cardTypeCode = entity.getCardTypeCode();
        if (cardTypeCode != null) {
            stmt.bindString(26, cardTypeCode);
        }
 
        String idCardType = entity.getIdCardType();
        if (idCardType != null) {
            stmt.bindString(27, idCardType);
        }
 
        String idCardTypeCode = entity.getIdCardTypeCode();
        if (idCardTypeCode != null) {
            stmt.bindString(28, idCardTypeCode);
        }
 
        String idCardNo = entity.getIdCardNo();
        if (idCardNo != null) {
            stmt.bindString(29, idCardNo);
        }
 
        String paySum = entity.getPaySum();
        if (paySum != null) {
            stmt.bindString(30, paySum);
        }
 
        String mobileNo = entity.getMobileNo();
        if (mobileNo != null) {
            stmt.bindString(31, mobileNo);
        }
 
        String isSendMsg = entity.getIsSendMsg();
        if (isSendMsg != null) {
            stmt.bindString(32, isSendMsg);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(33, remark);
        }
 
        String moneyType = entity.getMoneyType();
        if (moneyType != null) {
            stmt.bindString(34, moneyType);
        }
 
        String moneyTypeCode = entity.getMoneyTypeCode();
        if (moneyTypeCode != null) {
            stmt.bindString(35, moneyTypeCode);
        }
 
        String exceptMsg = entity.getExceptMsg();
        if (exceptMsg != null) {
            stmt.bindString(36, exceptMsg);
        }
 
        String repairfacPayFlag = entity.getRepairfacPayFlag();
        if (repairfacPayFlag != null) {
            stmt.bindString(37, repairfacPayFlag);
        }
 
        String additionalFlag = entity.getAdditionalFlag();
        if (additionalFlag != null) {
            stmt.bindString(38, additionalFlag);
        }
 
        Integer serialNo = entity.getSerialNo();
        if (serialNo != null) {
            stmt.bindLong(39, serialNo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SurveyPayment entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(2, reportCode);
        }
 
        String flowId = entity.getFlowId();
        if (flowId != null) {
            stmt.bindString(3, flowId);
        }
 
        String claimNo = entity.getClaimNo();
        if (claimNo != null) {
            stmt.bindString(4, claimNo);
        }
 
        String policyCode = entity.getPolicyCode();
        if (policyCode != null) {
            stmt.bindString(5, policyCode);
        }
 
        String claimTimes = entity.getClaimTimes();
        if (claimTimes != null) {
            stmt.bindString(6, claimTimes);
        }
 
        String editTimes = entity.getEditTimes();
        if (editTimes != null) {
            stmt.bindString(7, editTimes);
        }
 
        String payType = entity.getPayType();
        if (payType != null) {
            stmt.bindString(8, payType);
        }
 
        String payTypeCode = entity.getPayTypeCode();
        if (payTypeCode != null) {
            stmt.bindString(9, payTypeCode);
        }
 
        String customerType = entity.getCustomerType();
        if (customerType != null) {
            stmt.bindString(10, customerType);
        }
 
        String customerTypeCode = entity.getCustomerTypeCode();
        if (customerTypeCode != null) {
            stmt.bindString(11, customerTypeCode);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(12, customerName);
        }
 
        String bankProvince = entity.getBankProvince();
        if (bankProvince != null) {
            stmt.bindString(13, bankProvince);
        }
 
        String bankCity = entity.getBankCity();
        if (bankCity != null) {
            stmt.bindString(14, bankCity);
        }
 
        String bankCounty = entity.getBankCounty();
        if (bankCounty != null) {
            stmt.bindString(15, bankCounty);
        }
 
        String bankType = entity.getBankType();
        if (bankType != null) {
            stmt.bindString(16, bankType);
        }
 
        String bankTypeCode = entity.getBankTypeCode();
        if (bankTypeCode != null) {
            stmt.bindString(17, bankTypeCode);
        }
 
        String bankNetName = entity.getBankNetName();
        if (bankNetName != null) {
            stmt.bindString(18, bankNetName);
        }
 
        String bankNetCode = entity.getBankNetCode();
        if (bankNetCode != null) {
            stmt.bindString(19, bankNetCode);
        }
 
        String accountType = entity.getAccountType();
        if (accountType != null) {
            stmt.bindString(20, accountType);
        }
 
        String accountTypeCode = entity.getAccountTypeCode();
        if (accountTypeCode != null) {
            stmt.bindString(21, accountTypeCode);
        }
 
        String accountNo = entity.getAccountNo();
        if (accountNo != null) {
            stmt.bindString(22, accountNo);
        }
 
        String relation = entity.getRelation();
        if (relation != null) {
            stmt.bindString(23, relation);
        }
 
        String relationCode = entity.getRelationCode();
        if (relationCode != null) {
            stmt.bindString(24, relationCode);
        }
 
        String cardType = entity.getCardType();
        if (cardType != null) {
            stmt.bindString(25, cardType);
        }
 
        String cardTypeCode = entity.getCardTypeCode();
        if (cardTypeCode != null) {
            stmt.bindString(26, cardTypeCode);
        }
 
        String idCardType = entity.getIdCardType();
        if (idCardType != null) {
            stmt.bindString(27, idCardType);
        }
 
        String idCardTypeCode = entity.getIdCardTypeCode();
        if (idCardTypeCode != null) {
            stmt.bindString(28, idCardTypeCode);
        }
 
        String idCardNo = entity.getIdCardNo();
        if (idCardNo != null) {
            stmt.bindString(29, idCardNo);
        }
 
        String paySum = entity.getPaySum();
        if (paySum != null) {
            stmt.bindString(30, paySum);
        }
 
        String mobileNo = entity.getMobileNo();
        if (mobileNo != null) {
            stmt.bindString(31, mobileNo);
        }
 
        String isSendMsg = entity.getIsSendMsg();
        if (isSendMsg != null) {
            stmt.bindString(32, isSendMsg);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(33, remark);
        }
 
        String moneyType = entity.getMoneyType();
        if (moneyType != null) {
            stmt.bindString(34, moneyType);
        }
 
        String moneyTypeCode = entity.getMoneyTypeCode();
        if (moneyTypeCode != null) {
            stmt.bindString(35, moneyTypeCode);
        }
 
        String exceptMsg = entity.getExceptMsg();
        if (exceptMsg != null) {
            stmt.bindString(36, exceptMsg);
        }
 
        String repairfacPayFlag = entity.getRepairfacPayFlag();
        if (repairfacPayFlag != null) {
            stmt.bindString(37, repairfacPayFlag);
        }
 
        String additionalFlag = entity.getAdditionalFlag();
        if (additionalFlag != null) {
            stmt.bindString(38, additionalFlag);
        }
 
        Integer serialNo = entity.getSerialNo();
        if (serialNo != null) {
            stmt.bindLong(39, serialNo);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SurveyPayment readEntity(Cursor cursor, int offset) {
        SurveyPayment entity = new SurveyPayment( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // reportCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // flowId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // claimNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // policyCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // claimTimes
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // editTimes
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // payType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // payTypeCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // customerType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // customerTypeCode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // customerName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // bankProvince
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // bankCity
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // bankCounty
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // bankType
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // bankTypeCode
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // bankNetName
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // bankNetCode
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // accountType
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // accountTypeCode
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // accountNo
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // relation
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // relationCode
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // cardType
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // cardTypeCode
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // idCardType
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // idCardTypeCode
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // idCardNo
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // paySum
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // mobileNo
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // isSendMsg
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // remark
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // moneyType
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // moneyTypeCode
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // exceptMsg
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // repairfacPayFlag
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // additionalFlag
            cursor.isNull(offset + 38) ? null : cursor.getInt(offset + 38) // serialNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SurveyPayment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setReportCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFlowId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClaimNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPolicyCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClaimTimes(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEditTimes(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPayType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPayTypeCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCustomerType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCustomerTypeCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCustomerName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBankProvince(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBankCity(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBankCounty(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBankType(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setBankTypeCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBankNetName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBankNetCode(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setAccountType(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAccountTypeCode(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAccountNo(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setRelation(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setRelationCode(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCardType(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setCardTypeCode(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setIdCardType(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setIdCardTypeCode(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setIdCardNo(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setPaySum(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setMobileNo(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setIsSendMsg(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setRemark(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setMoneyType(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setMoneyTypeCode(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setExceptMsg(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setRepairfacPayFlag(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setAdditionalFlag(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setSerialNo(cursor.isNull(offset + 38) ? null : cursor.getInt(offset + 38));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SurveyPayment entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SurveyPayment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SurveyPayment entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
