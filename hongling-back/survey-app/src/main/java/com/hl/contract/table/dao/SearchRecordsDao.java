package com.hl.contract.table.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hl.contract.table.model.SearchRecords;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEARCH_RECORDS".
*/
public class SearchRecordsDao extends AbstractDao<SearchRecords, Long> {

    public static final String TABLENAME = "SEARCH_RECORDS";

    /**
     * Properties of entity SearchRecords.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HandlerCode = new Property(1, String.class, "handlerCode", false, "HANDLER_CODE");
        public final static Property HandlerName = new Property(2, String.class, "handlerName", false, "HANDLER_NAME");
        public final static Property SearchType = new Property(3, String.class, "searchType", false, "SEARCH_TYPE");
        public final static Property KeyWord = new Property(4, String.class, "keyWord", false, "KEY_WORD");
        public final static Property OperatingTime = new Property(5, String.class, "operatingTime", false, "OPERATING_TIME");
    }


    public SearchRecordsDao(DaoConfig config) {
        super(config);
    }
    
    public SearchRecordsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEARCH_RECORDS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"HANDLER_CODE\" TEXT," + // 1: handlerCode
                "\"HANDLER_NAME\" TEXT," + // 2: handlerName
                "\"SEARCH_TYPE\" TEXT," + // 3: searchType
                "\"KEY_WORD\" TEXT," + // 4: keyWord
                "\"OPERATING_TIME\" TEXT);"); // 5: operatingTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEARCH_RECORDS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SearchRecords entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String handlerCode = entity.getHandlerCode();
        if (handlerCode != null) {
            stmt.bindString(2, handlerCode);
        }
 
        String handlerName = entity.getHandlerName();
        if (handlerName != null) {
            stmt.bindString(3, handlerName);
        }
 
        String searchType = entity.getSearchType();
        if (searchType != null) {
            stmt.bindString(4, searchType);
        }
 
        String keyWord = entity.getKeyWord();
        if (keyWord != null) {
            stmt.bindString(5, keyWord);
        }
 
        String operatingTime = entity.getOperatingTime();
        if (operatingTime != null) {
            stmt.bindString(6, operatingTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SearchRecords entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String handlerCode = entity.getHandlerCode();
        if (handlerCode != null) {
            stmt.bindString(2, handlerCode);
        }
 
        String handlerName = entity.getHandlerName();
        if (handlerName != null) {
            stmt.bindString(3, handlerName);
        }
 
        String searchType = entity.getSearchType();
        if (searchType != null) {
            stmt.bindString(4, searchType);
        }
 
        String keyWord = entity.getKeyWord();
        if (keyWord != null) {
            stmt.bindString(5, keyWord);
        }
 
        String operatingTime = entity.getOperatingTime();
        if (operatingTime != null) {
            stmt.bindString(6, operatingTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SearchRecords readEntity(Cursor cursor, int offset) {
        SearchRecords entity = new SearchRecords( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // handlerCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // handlerName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // searchType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // keyWord
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // operatingTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SearchRecords entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHandlerCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHandlerName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSearchType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKeyWord(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOperatingTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SearchRecords entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SearchRecords entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SearchRecords entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
