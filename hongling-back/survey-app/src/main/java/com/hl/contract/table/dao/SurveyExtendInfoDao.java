package com.hl.contract.table.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hl.contract.table.model.SurveyExtendInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SURVEY_EXTEND_INFO".
*/
public class SurveyExtendInfoDao extends AbstractDao<SurveyExtendInfo, String> {

    public static final String TABLENAME = "SURVEY_EXTEND_INFO";

    /**
     * Properties of entity SurveyExtendInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property ReportNo = new Property(1, String.class, "reportNo", false, "REPORT_NO");
        public final static Property FlowId = new Property(2, String.class, "flowId", false, "FLOW_ID");
        public final static Property SurveyreportCode = new Property(3, String.class, "surveyreportCode", false, "SURVEYREPORT_CODE");
        public final static Property SurveyreportName = new Property(4, String.class, "surveyreportName", false, "SURVEYREPORT_NAME");
        public final static Property SurveyreportValue = new Property(5, String.class, "surveyreportValue", false, "SURVEYREPORT_VALUE");
        public final static Property SurveyreportMemo = new Property(6, String.class, "surveyreportMemo", false, "SURVEYREPORT_MEMO");
        public final static Property Date = new Property(7, String.class, "date", false, "DATE");
        public final static Property Memo = new Property(8, String.class, "memo", false, "MEMO");
        public final static Property RecordNme = new Property(9, String.class, "recordNme", false, "RECORD_NME");
        public final static Property EmpCde = new Property(10, String.class, "empCde", false, "EMP_CDE");
        public final static Property RequiredFlag = new Property(11, String.class, "requiredFlag", false, "REQUIRED_FLAG");
        public final static Property SpinnerType = new Property(12, String.class, "spinnerType", false, "SPINNER_TYPE");
    }


    public SurveyExtendInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SurveyExtendInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SURVEY_EXTEND_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"REPORT_NO\" TEXT," + // 1: reportNo
                "\"FLOW_ID\" TEXT," + // 2: flowId
                "\"SURVEYREPORT_CODE\" TEXT," + // 3: surveyreportCode
                "\"SURVEYREPORT_NAME\" TEXT," + // 4: surveyreportName
                "\"SURVEYREPORT_VALUE\" TEXT," + // 5: surveyreportValue
                "\"SURVEYREPORT_MEMO\" TEXT," + // 6: surveyreportMemo
                "\"DATE\" TEXT," + // 7: date
                "\"MEMO\" TEXT," + // 8: memo
                "\"RECORD_NME\" TEXT," + // 9: recordNme
                "\"EMP_CDE\" TEXT," + // 10: empCde
                "\"REQUIRED_FLAG\" TEXT," + // 11: requiredFlag
                "\"SPINNER_TYPE\" TEXT);"); // 12: spinnerType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SURVEY_EXTEND_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SurveyExtendInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportNo = entity.getReportNo();
        if (reportNo != null) {
            stmt.bindString(2, reportNo);
        }
 
        String flowId = entity.getFlowId();
        if (flowId != null) {
            stmt.bindString(3, flowId);
        }
 
        String surveyreportCode = entity.getSurveyreportCode();
        if (surveyreportCode != null) {
            stmt.bindString(4, surveyreportCode);
        }
 
        String surveyreportName = entity.getSurveyreportName();
        if (surveyreportName != null) {
            stmt.bindString(5, surveyreportName);
        }
 
        String surveyreportValue = entity.getSurveyreportValue();
        if (surveyreportValue != null) {
            stmt.bindString(6, surveyreportValue);
        }
 
        String surveyreportMemo = entity.getSurveyreportMemo();
        if (surveyreportMemo != null) {
            stmt.bindString(7, surveyreportMemo);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(8, date);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(9, memo);
        }
 
        String recordNme = entity.getRecordNme();
        if (recordNme != null) {
            stmt.bindString(10, recordNme);
        }
 
        String empCde = entity.getEmpCde();
        if (empCde != null) {
            stmt.bindString(11, empCde);
        }
 
        String requiredFlag = entity.getRequiredFlag();
        if (requiredFlag != null) {
            stmt.bindString(12, requiredFlag);
        }
 
        String spinnerType = entity.getSpinnerType();
        if (spinnerType != null) {
            stmt.bindString(13, spinnerType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SurveyExtendInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportNo = entity.getReportNo();
        if (reportNo != null) {
            stmt.bindString(2, reportNo);
        }
 
        String flowId = entity.getFlowId();
        if (flowId != null) {
            stmt.bindString(3, flowId);
        }
 
        String surveyreportCode = entity.getSurveyreportCode();
        if (surveyreportCode != null) {
            stmt.bindString(4, surveyreportCode);
        }
 
        String surveyreportName = entity.getSurveyreportName();
        if (surveyreportName != null) {
            stmt.bindString(5, surveyreportName);
        }
 
        String surveyreportValue = entity.getSurveyreportValue();
        if (surveyreportValue != null) {
            stmt.bindString(6, surveyreportValue);
        }
 
        String surveyreportMemo = entity.getSurveyreportMemo();
        if (surveyreportMemo != null) {
            stmt.bindString(7, surveyreportMemo);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(8, date);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(9, memo);
        }
 
        String recordNme = entity.getRecordNme();
        if (recordNme != null) {
            stmt.bindString(10, recordNme);
        }
 
        String empCde = entity.getEmpCde();
        if (empCde != null) {
            stmt.bindString(11, empCde);
        }
 
        String requiredFlag = entity.getRequiredFlag();
        if (requiredFlag != null) {
            stmt.bindString(12, requiredFlag);
        }
 
        String spinnerType = entity.getSpinnerType();
        if (spinnerType != null) {
            stmt.bindString(13, spinnerType);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SurveyExtendInfo readEntity(Cursor cursor, int offset) {
        SurveyExtendInfo entity = new SurveyExtendInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // reportNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // flowId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // surveyreportCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // surveyreportName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // surveyreportValue
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // surveyreportMemo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // date
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // memo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // recordNme
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // empCde
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // requiredFlag
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // spinnerType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SurveyExtendInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setReportNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFlowId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSurveyreportCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSurveyreportName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSurveyreportValue(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSurveyreportMemo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMemo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRecordNme(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEmpCde(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRequiredFlag(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSpinnerType(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SurveyExtendInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SurveyExtendInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SurveyExtendInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
