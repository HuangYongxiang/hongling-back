package com.hl.contract.table.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hl.contract.table.model.HistoricalPaymentInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORICAL_PAYMENT_INFO".
*/
public class HistoricalPaymentInfoDao extends AbstractDao<HistoricalPaymentInfo, String> {

    public static final String TABLENAME = "HISTORICAL_PAYMENT_INFO";

    /**
     * Properties of entity HistoricalPaymentInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property ReportCode = new Property(1, String.class, "reportCode", false, "REPORT_CODE");
        public final static Property HisReportCode = new Property(2, String.class, "hisReportCode", false, "HIS_REPORT_CODE");
        public final static Property HisPolicyCode = new Property(3, String.class, "hisPolicyCode", false, "HIS_POLICY_CODE");
        public final static Property HisPaycaseCode = new Property(4, String.class, "hisPaycaseCode", false, "HIS_PAYCASE_CODE");
        public final static Property HisPaySum = new Property(5, Double.class, "hisPaySum", false, "HIS_PAY_SUM");
        public final static Property HisPayNum = new Property(6, Double.class, "hisPayNum", false, "HIS_PAY_NUM");
        public final static Property HisClaimsExaminers = new Property(7, String.class, "hisClaimsExaminers", false, "HIS_CLAIMS_EXAMINERS");
        public final static Property HisNuclearDate = new Property(8, String.class, "hisNuclearDate", false, "HIS_NUCLEAR_DATE");
        public final static Property HisClaimState = new Property(9, String.class, "hisClaimState", false, "HIS_CLAIM_STATE");
        public final static Property HisPayWay = new Property(10, String.class, "hisPayWay", false, "HIS_PAY_WAY");
        public final static Property HisPayclearTime = new Property(11, String.class, "hisPayclearTime", false, "HIS_PAYCLEAR_TIME");
    }


    public HistoricalPaymentInfoDao(DaoConfig config) {
        super(config);
    }
    
    public HistoricalPaymentInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORICAL_PAYMENT_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"REPORT_CODE\" TEXT," + // 1: reportCode
                "\"HIS_REPORT_CODE\" TEXT," + // 2: hisReportCode
                "\"HIS_POLICY_CODE\" TEXT," + // 3: hisPolicyCode
                "\"HIS_PAYCASE_CODE\" TEXT," + // 4: hisPaycaseCode
                "\"HIS_PAY_SUM\" REAL," + // 5: hisPaySum
                "\"HIS_PAY_NUM\" REAL," + // 6: hisPayNum
                "\"HIS_CLAIMS_EXAMINERS\" TEXT," + // 7: hisClaimsExaminers
                "\"HIS_NUCLEAR_DATE\" TEXT," + // 8: hisNuclearDate
                "\"HIS_CLAIM_STATE\" TEXT," + // 9: hisClaimState
                "\"HIS_PAY_WAY\" TEXT," + // 10: hisPayWay
                "\"HIS_PAYCLEAR_TIME\" TEXT);"); // 11: hisPayclearTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORICAL_PAYMENT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoricalPaymentInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(2, reportCode);
        }
 
        String hisReportCode = entity.getHisReportCode();
        if (hisReportCode != null) {
            stmt.bindString(3, hisReportCode);
        }
 
        String hisPolicyCode = entity.getHisPolicyCode();
        if (hisPolicyCode != null) {
            stmt.bindString(4, hisPolicyCode);
        }
 
        String hisPaycaseCode = entity.getHisPaycaseCode();
        if (hisPaycaseCode != null) {
            stmt.bindString(5, hisPaycaseCode);
        }
 
        Double hisPaySum = entity.getHisPaySum();
        if (hisPaySum != null) {
            stmt.bindDouble(6, hisPaySum);
        }
 
        Double hisPayNum = entity.getHisPayNum();
        if (hisPayNum != null) {
            stmt.bindDouble(7, hisPayNum);
        }
 
        String hisClaimsExaminers = entity.getHisClaimsExaminers();
        if (hisClaimsExaminers != null) {
            stmt.bindString(8, hisClaimsExaminers);
        }
 
        String hisNuclearDate = entity.getHisNuclearDate();
        if (hisNuclearDate != null) {
            stmt.bindString(9, hisNuclearDate);
        }
 
        String hisClaimState = entity.getHisClaimState();
        if (hisClaimState != null) {
            stmt.bindString(10, hisClaimState);
        }
 
        String hisPayWay = entity.getHisPayWay();
        if (hisPayWay != null) {
            stmt.bindString(11, hisPayWay);
        }
 
        String hisPayclearTime = entity.getHisPayclearTime();
        if (hisPayclearTime != null) {
            stmt.bindString(12, hisPayclearTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoricalPaymentInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(2, reportCode);
        }
 
        String hisReportCode = entity.getHisReportCode();
        if (hisReportCode != null) {
            stmt.bindString(3, hisReportCode);
        }
 
        String hisPolicyCode = entity.getHisPolicyCode();
        if (hisPolicyCode != null) {
            stmt.bindString(4, hisPolicyCode);
        }
 
        String hisPaycaseCode = entity.getHisPaycaseCode();
        if (hisPaycaseCode != null) {
            stmt.bindString(5, hisPaycaseCode);
        }
 
        Double hisPaySum = entity.getHisPaySum();
        if (hisPaySum != null) {
            stmt.bindDouble(6, hisPaySum);
        }
 
        Double hisPayNum = entity.getHisPayNum();
        if (hisPayNum != null) {
            stmt.bindDouble(7, hisPayNum);
        }
 
        String hisClaimsExaminers = entity.getHisClaimsExaminers();
        if (hisClaimsExaminers != null) {
            stmt.bindString(8, hisClaimsExaminers);
        }
 
        String hisNuclearDate = entity.getHisNuclearDate();
        if (hisNuclearDate != null) {
            stmt.bindString(9, hisNuclearDate);
        }
 
        String hisClaimState = entity.getHisClaimState();
        if (hisClaimState != null) {
            stmt.bindString(10, hisClaimState);
        }
 
        String hisPayWay = entity.getHisPayWay();
        if (hisPayWay != null) {
            stmt.bindString(11, hisPayWay);
        }
 
        String hisPayclearTime = entity.getHisPayclearTime();
        if (hisPayclearTime != null) {
            stmt.bindString(12, hisPayclearTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public HistoricalPaymentInfo readEntity(Cursor cursor, int offset) {
        HistoricalPaymentInfo entity = new HistoricalPaymentInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // reportCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hisReportCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hisPolicyCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // hisPaycaseCode
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // hisPaySum
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // hisPayNum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // hisClaimsExaminers
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // hisNuclearDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // hisClaimState
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // hisPayWay
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // hisPayclearTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoricalPaymentInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setReportCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHisReportCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHisPolicyCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHisPaycaseCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHisPaySum(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setHisPayNum(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setHisClaimsExaminers(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHisNuclearDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHisClaimState(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHisPayWay(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHisPayclearTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(HistoricalPaymentInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(HistoricalPaymentInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoricalPaymentInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
