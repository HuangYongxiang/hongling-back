package com.hl.contract.table.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hl.contract.table.model.HistoricalReportInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORICAL_REPORT_INFO".
*/
public class HistoricalReportInfoDao extends AbstractDao<HistoricalReportInfo, String> {

    public static final String TABLENAME = "HISTORICAL_REPORT_INFO";

    /**
     * Properties of entity HistoricalReportInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property ReportCode = new Property(1, String.class, "reportCode", false, "REPORT_CODE");
        public final static Property HisReportCode = new Property(2, String.class, "hisReportCode", false, "HIS_REPORT_CODE");
        public final static Property HisReporter = new Property(3, String.class, "hisReporter", false, "HIS_REPORTER");
        public final static Property HisReportTime = new Property(4, String.class, "hisReportTime", false, "HIS_REPORT_TIME");
        public final static Property HisAccidentTime = new Property(5, String.class, "hisAccidentTime", false, "HIS_ACCIDENT_TIME");
        public final static Property HisAccidentPlace = new Property(6, String.class, "hisAccidentPlace", false, "HIS_ACCIDENT_PLACE");
        public final static Property HisAccidentCause = new Property(7, String.class, "hisAccidentCause", false, "HIS_ACCIDENT_CAUSE");
        public final static Property HisReportMoblephone = new Property(8, String.class, "hisReportMoblephone", false, "HIS_REPORT_MOBLEPHONE");
        public final static Property HisManageType = new Property(9, String.class, "hisManageType", false, "HIS_MANAGE_TYPE");
    }


    public HistoricalReportInfoDao(DaoConfig config) {
        super(config);
    }
    
    public HistoricalReportInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORICAL_REPORT_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"REPORT_CODE\" TEXT," + // 1: reportCode
                "\"HIS_REPORT_CODE\" TEXT," + // 2: hisReportCode
                "\"HIS_REPORTER\" TEXT," + // 3: hisReporter
                "\"HIS_REPORT_TIME\" TEXT," + // 4: hisReportTime
                "\"HIS_ACCIDENT_TIME\" TEXT," + // 5: hisAccidentTime
                "\"HIS_ACCIDENT_PLACE\" TEXT," + // 6: hisAccidentPlace
                "\"HIS_ACCIDENT_CAUSE\" TEXT," + // 7: hisAccidentCause
                "\"HIS_REPORT_MOBLEPHONE\" TEXT," + // 8: hisReportMoblephone
                "\"HIS_MANAGE_TYPE\" TEXT);"); // 9: hisManageType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORICAL_REPORT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoricalReportInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(2, reportCode);
        }
 
        String hisReportCode = entity.getHisReportCode();
        if (hisReportCode != null) {
            stmt.bindString(3, hisReportCode);
        }
 
        String hisReporter = entity.getHisReporter();
        if (hisReporter != null) {
            stmt.bindString(4, hisReporter);
        }
 
        String hisReportTime = entity.getHisReportTime();
        if (hisReportTime != null) {
            stmt.bindString(5, hisReportTime);
        }
 
        String hisAccidentTime = entity.getHisAccidentTime();
        if (hisAccidentTime != null) {
            stmt.bindString(6, hisAccidentTime);
        }
 
        String hisAccidentPlace = entity.getHisAccidentPlace();
        if (hisAccidentPlace != null) {
            stmt.bindString(7, hisAccidentPlace);
        }
 
        String hisAccidentCause = entity.getHisAccidentCause();
        if (hisAccidentCause != null) {
            stmt.bindString(8, hisAccidentCause);
        }
 
        String hisReportMoblephone = entity.getHisReportMoblephone();
        if (hisReportMoblephone != null) {
            stmt.bindString(9, hisReportMoblephone);
        }
 
        String hisManageType = entity.getHisManageType();
        if (hisManageType != null) {
            stmt.bindString(10, hisManageType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoricalReportInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(2, reportCode);
        }
 
        String hisReportCode = entity.getHisReportCode();
        if (hisReportCode != null) {
            stmt.bindString(3, hisReportCode);
        }
 
        String hisReporter = entity.getHisReporter();
        if (hisReporter != null) {
            stmt.bindString(4, hisReporter);
        }
 
        String hisReportTime = entity.getHisReportTime();
        if (hisReportTime != null) {
            stmt.bindString(5, hisReportTime);
        }
 
        String hisAccidentTime = entity.getHisAccidentTime();
        if (hisAccidentTime != null) {
            stmt.bindString(6, hisAccidentTime);
        }
 
        String hisAccidentPlace = entity.getHisAccidentPlace();
        if (hisAccidentPlace != null) {
            stmt.bindString(7, hisAccidentPlace);
        }
 
        String hisAccidentCause = entity.getHisAccidentCause();
        if (hisAccidentCause != null) {
            stmt.bindString(8, hisAccidentCause);
        }
 
        String hisReportMoblephone = entity.getHisReportMoblephone();
        if (hisReportMoblephone != null) {
            stmt.bindString(9, hisReportMoblephone);
        }
 
        String hisManageType = entity.getHisManageType();
        if (hisManageType != null) {
            stmt.bindString(10, hisManageType);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public HistoricalReportInfo readEntity(Cursor cursor, int offset) {
        HistoricalReportInfo entity = new HistoricalReportInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // reportCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hisReportCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hisReporter
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // hisReportTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hisAccidentTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // hisAccidentPlace
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // hisAccidentCause
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // hisReportMoblephone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // hisManageType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoricalReportInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setReportCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHisReportCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHisReporter(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHisReportTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHisAccidentTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHisAccidentPlace(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHisAccidentCause(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHisReportMoblephone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHisManageType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(HistoricalReportInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(HistoricalReportInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoricalReportInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
