package com.hl.contract.table.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hl.contract.table.model.CargoFeeInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARGO_FEE_INFO".
*/
public class CargoFeeInfoDao extends AbstractDao<CargoFeeInfo, String> {

    public static final String TABLENAME = "CARGO_FEE_INFO";

    /**
     * Properties of entity CargoFeeInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property ReportCode = new Property(1, String.class, "reportCode", false, "REPORT_CODE");
        public final static Property FlowId = new Property(2, String.class, "flowId", false, "FLOW_ID");
        public final static Property EvalId = new Property(3, String.class, "evalId", false, "EVAL_ID");
        public final static Property CreateBy = new Property(4, String.class, "createBy", false, "CREATE_BY");
        public final static Property CreateDate = new Property(5, String.class, "createDate", false, "CREATE_DATE");
        public final static Property UpdateBy = new Property(6, String.class, "updateBy", false, "UPDATE_BY");
        public final static Property UpdateDate = new Property(7, String.class, "updateDate", false, "UPDATE_DATE");
        public final static Property CargoType = new Property(8, String.class, "cargoType", false, "CARGO_TYPE");
        public final static Property CargoTypeCode = new Property(9, String.class, "cargoTypeCode", false, "CARGO_TYPE_CODE");
        public final static Property CargoItemName = new Property(10, String.class, "cargoItemName", false, "CARGO_ITEM_NAME");
        public final static Property RiskCode = new Property(11, String.class, "riskCode", false, "RISK_CODE");
        public final static Property RiskName = new Property(12, String.class, "riskName", false, "RISK_NAME");
        public final static Property ItemCode = new Property(13, String.class, "itemCode", false, "ITEM_CODE");
        public final static Property ItemName = new Property(14, String.class, "itemName", false, "ITEM_NAME");
        public final static Property FeeName = new Property(15, String.class, "feeName", false, "FEE_NAME");
        public final static Property FeeCode = new Property(16, String.class, "feeCode", false, "FEE_CODE");
        public final static Property EvalUnitPrice = new Property(17, double.class, "evalUnitPrice", false, "EVAL_UNIT_PRICE");
        public final static Property EvalAmount = new Property(18, double.class, "evalAmount", false, "EVAL_AMOUNT");
        public final static Property EvalLossDegree = new Property(19, double.class, "evalLossDegree", false, "EVAL_LOSS_DEGREE");
        public final static Property EvalLossSum = new Property(20, double.class, "evalLossSum", false, "EVAL_LOSS_SUM");
        public final static Property EvalRemains = new Property(21, double.class, "evalRemains", false, "EVAL_REMAINS");
        public final static Property ApproveUnitPrice = new Property(22, double.class, "approveUnitPrice", false, "APPROVE_UNIT_PRICE");
        public final static Property ApproveAmount = new Property(23, double.class, "approveAmount", false, "APPROVE_AMOUNT");
        public final static Property ApproveLossDegree = new Property(24, double.class, "approveLossDegree", false, "APPROVE_LOSS_DEGREE");
        public final static Property ApproveRemains = new Property(25, double.class, "approveRemains", false, "APPROVE_REMAINS");
        public final static Property ApproveLossSum = new Property(26, double.class, "approveLossSum", false, "APPROVE_LOSS_SUM");
        public final static Property ApproveCheckState = new Property(27, String.class, "approveCheckState", false, "APPROVE_CHECK_STATE");
        public final static Property LossType = new Property(28, String.class, "lossType", false, "LOSS_TYPE");
        public final static Property LossTypeCode = new Property(29, String.class, "lossTypeCode", false, "LOSS_TYPE_CODE");
        public final static Property FitBackFlag = new Property(30, String.class, "fitBackFlag", false, "FIT_BACK_FLAG");
        public final static Property ApproveFitBackFlag = new Property(31, String.class, "approveFitBackFlag", false, "APPROVE_FIT_BACK_FLAG");
        public final static Property Remark = new Property(32, String.class, "remark", false, "REMARK");
        public final static Property RecheckFlag = new Property(33, String.class, "recheckFlag", false, "RECHECK_FLAG");
        public final static Property RecheckUnitPrice = new Property(34, double.class, "recheckUnitPrice", false, "RECHECK_UNIT_PRICE");
        public final static Property RecheckAmount = new Property(35, double.class, "recheckAmount", false, "RECHECK_AMOUNT");
        public final static Property RecheckLossDegree = new Property(36, double.class, "recheckLossDegree", false, "RECHECK_LOSS_DEGREE");
        public final static Property RecheckLossSum = new Property(37, double.class, "recheckLossSum", false, "RECHECK_LOSS_SUM");
        public final static Property RecheckUnitRemains = new Property(38, double.class, "recheckUnitRemains", false, "RECHECK_UNIT_REMAINS");
        public final static Property RecheckFitBackFlag = new Property(39, String.class, "recheckFitBackFlag", false, "RECHECK_FIT_BACK_FLAG");
    }


    public CargoFeeInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CargoFeeInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARGO_FEE_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"REPORT_CODE\" TEXT," + // 1: reportCode
                "\"FLOW_ID\" TEXT," + // 2: flowId
                "\"EVAL_ID\" TEXT," + // 3: evalId
                "\"CREATE_BY\" TEXT," + // 4: createBy
                "\"CREATE_DATE\" TEXT," + // 5: createDate
                "\"UPDATE_BY\" TEXT," + // 6: updateBy
                "\"UPDATE_DATE\" TEXT," + // 7: updateDate
                "\"CARGO_TYPE\" TEXT," + // 8: cargoType
                "\"CARGO_TYPE_CODE\" TEXT," + // 9: cargoTypeCode
                "\"CARGO_ITEM_NAME\" TEXT," + // 10: cargoItemName
                "\"RISK_CODE\" TEXT," + // 11: riskCode
                "\"RISK_NAME\" TEXT," + // 12: riskName
                "\"ITEM_CODE\" TEXT," + // 13: itemCode
                "\"ITEM_NAME\" TEXT," + // 14: itemName
                "\"FEE_NAME\" TEXT," + // 15: feeName
                "\"FEE_CODE\" TEXT," + // 16: feeCode
                "\"EVAL_UNIT_PRICE\" REAL NOT NULL ," + // 17: evalUnitPrice
                "\"EVAL_AMOUNT\" REAL NOT NULL ," + // 18: evalAmount
                "\"EVAL_LOSS_DEGREE\" REAL NOT NULL ," + // 19: evalLossDegree
                "\"EVAL_LOSS_SUM\" REAL NOT NULL ," + // 20: evalLossSum
                "\"EVAL_REMAINS\" REAL NOT NULL ," + // 21: evalRemains
                "\"APPROVE_UNIT_PRICE\" REAL NOT NULL ," + // 22: approveUnitPrice
                "\"APPROVE_AMOUNT\" REAL NOT NULL ," + // 23: approveAmount
                "\"APPROVE_LOSS_DEGREE\" REAL NOT NULL ," + // 24: approveLossDegree
                "\"APPROVE_REMAINS\" REAL NOT NULL ," + // 25: approveRemains
                "\"APPROVE_LOSS_SUM\" REAL NOT NULL ," + // 26: approveLossSum
                "\"APPROVE_CHECK_STATE\" TEXT," + // 27: approveCheckState
                "\"LOSS_TYPE\" TEXT," + // 28: lossType
                "\"LOSS_TYPE_CODE\" TEXT," + // 29: lossTypeCode
                "\"FIT_BACK_FLAG\" TEXT," + // 30: fitBackFlag
                "\"APPROVE_FIT_BACK_FLAG\" TEXT," + // 31: approveFitBackFlag
                "\"REMARK\" TEXT," + // 32: remark
                "\"RECHECK_FLAG\" TEXT," + // 33: recheckFlag
                "\"RECHECK_UNIT_PRICE\" REAL NOT NULL ," + // 34: recheckUnitPrice
                "\"RECHECK_AMOUNT\" REAL NOT NULL ," + // 35: recheckAmount
                "\"RECHECK_LOSS_DEGREE\" REAL NOT NULL ," + // 36: recheckLossDegree
                "\"RECHECK_LOSS_SUM\" REAL NOT NULL ," + // 37: recheckLossSum
                "\"RECHECK_UNIT_REMAINS\" REAL NOT NULL ," + // 38: recheckUnitRemains
                "\"RECHECK_FIT_BACK_FLAG\" TEXT);"); // 39: recheckFitBackFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARGO_FEE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CargoFeeInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(2, reportCode);
        }
 
        String flowId = entity.getFlowId();
        if (flowId != null) {
            stmt.bindString(3, flowId);
        }
 
        String evalId = entity.getEvalId();
        if (evalId != null) {
            stmt.bindString(4, evalId);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(5, createBy);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(6, createDate);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(7, updateBy);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(8, updateDate);
        }
 
        String cargoType = entity.getCargoType();
        if (cargoType != null) {
            stmt.bindString(9, cargoType);
        }
 
        String cargoTypeCode = entity.getCargoTypeCode();
        if (cargoTypeCode != null) {
            stmt.bindString(10, cargoTypeCode);
        }
 
        String cargoItemName = entity.getCargoItemName();
        if (cargoItemName != null) {
            stmt.bindString(11, cargoItemName);
        }
 
        String riskCode = entity.getRiskCode();
        if (riskCode != null) {
            stmt.bindString(12, riskCode);
        }
 
        String riskName = entity.getRiskName();
        if (riskName != null) {
            stmt.bindString(13, riskName);
        }
 
        String itemCode = entity.getItemCode();
        if (itemCode != null) {
            stmt.bindString(14, itemCode);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(15, itemName);
        }
 
        String feeName = entity.getFeeName();
        if (feeName != null) {
            stmt.bindString(16, feeName);
        }
 
        String feeCode = entity.getFeeCode();
        if (feeCode != null) {
            stmt.bindString(17, feeCode);
        }
        stmt.bindDouble(18, entity.getEvalUnitPrice());
        stmt.bindDouble(19, entity.getEvalAmount());
        stmt.bindDouble(20, entity.getEvalLossDegree());
        stmt.bindDouble(21, entity.getEvalLossSum());
        stmt.bindDouble(22, entity.getEvalRemains());
        stmt.bindDouble(23, entity.getApproveUnitPrice());
        stmt.bindDouble(24, entity.getApproveAmount());
        stmt.bindDouble(25, entity.getApproveLossDegree());
        stmt.bindDouble(26, entity.getApproveRemains());
        stmt.bindDouble(27, entity.getApproveLossSum());
 
        String approveCheckState = entity.getApproveCheckState();
        if (approveCheckState != null) {
            stmt.bindString(28, approveCheckState);
        }
 
        String lossType = entity.getLossType();
        if (lossType != null) {
            stmt.bindString(29, lossType);
        }
 
        String lossTypeCode = entity.getLossTypeCode();
        if (lossTypeCode != null) {
            stmt.bindString(30, lossTypeCode);
        }
 
        String fitBackFlag = entity.getFitBackFlag();
        if (fitBackFlag != null) {
            stmt.bindString(31, fitBackFlag);
        }
 
        String approveFitBackFlag = entity.getApproveFitBackFlag();
        if (approveFitBackFlag != null) {
            stmt.bindString(32, approveFitBackFlag);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(33, remark);
        }
 
        String recheckFlag = entity.getRecheckFlag();
        if (recheckFlag != null) {
            stmt.bindString(34, recheckFlag);
        }
        stmt.bindDouble(35, entity.getRecheckUnitPrice());
        stmt.bindDouble(36, entity.getRecheckAmount());
        stmt.bindDouble(37, entity.getRecheckLossDegree());
        stmt.bindDouble(38, entity.getRecheckLossSum());
        stmt.bindDouble(39, entity.getRecheckUnitRemains());
 
        String recheckFitBackFlag = entity.getRecheckFitBackFlag();
        if (recheckFitBackFlag != null) {
            stmt.bindString(40, recheckFitBackFlag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CargoFeeInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(2, reportCode);
        }
 
        String flowId = entity.getFlowId();
        if (flowId != null) {
            stmt.bindString(3, flowId);
        }
 
        String evalId = entity.getEvalId();
        if (evalId != null) {
            stmt.bindString(4, evalId);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(5, createBy);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(6, createDate);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(7, updateBy);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(8, updateDate);
        }
 
        String cargoType = entity.getCargoType();
        if (cargoType != null) {
            stmt.bindString(9, cargoType);
        }
 
        String cargoTypeCode = entity.getCargoTypeCode();
        if (cargoTypeCode != null) {
            stmt.bindString(10, cargoTypeCode);
        }
 
        String cargoItemName = entity.getCargoItemName();
        if (cargoItemName != null) {
            stmt.bindString(11, cargoItemName);
        }
 
        String riskCode = entity.getRiskCode();
        if (riskCode != null) {
            stmt.bindString(12, riskCode);
        }
 
        String riskName = entity.getRiskName();
        if (riskName != null) {
            stmt.bindString(13, riskName);
        }
 
        String itemCode = entity.getItemCode();
        if (itemCode != null) {
            stmt.bindString(14, itemCode);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(15, itemName);
        }
 
        String feeName = entity.getFeeName();
        if (feeName != null) {
            stmt.bindString(16, feeName);
        }
 
        String feeCode = entity.getFeeCode();
        if (feeCode != null) {
            stmt.bindString(17, feeCode);
        }
        stmt.bindDouble(18, entity.getEvalUnitPrice());
        stmt.bindDouble(19, entity.getEvalAmount());
        stmt.bindDouble(20, entity.getEvalLossDegree());
        stmt.bindDouble(21, entity.getEvalLossSum());
        stmt.bindDouble(22, entity.getEvalRemains());
        stmt.bindDouble(23, entity.getApproveUnitPrice());
        stmt.bindDouble(24, entity.getApproveAmount());
        stmt.bindDouble(25, entity.getApproveLossDegree());
        stmt.bindDouble(26, entity.getApproveRemains());
        stmt.bindDouble(27, entity.getApproveLossSum());
 
        String approveCheckState = entity.getApproveCheckState();
        if (approveCheckState != null) {
            stmt.bindString(28, approveCheckState);
        }
 
        String lossType = entity.getLossType();
        if (lossType != null) {
            stmt.bindString(29, lossType);
        }
 
        String lossTypeCode = entity.getLossTypeCode();
        if (lossTypeCode != null) {
            stmt.bindString(30, lossTypeCode);
        }
 
        String fitBackFlag = entity.getFitBackFlag();
        if (fitBackFlag != null) {
            stmt.bindString(31, fitBackFlag);
        }
 
        String approveFitBackFlag = entity.getApproveFitBackFlag();
        if (approveFitBackFlag != null) {
            stmt.bindString(32, approveFitBackFlag);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(33, remark);
        }
 
        String recheckFlag = entity.getRecheckFlag();
        if (recheckFlag != null) {
            stmt.bindString(34, recheckFlag);
        }
        stmt.bindDouble(35, entity.getRecheckUnitPrice());
        stmt.bindDouble(36, entity.getRecheckAmount());
        stmt.bindDouble(37, entity.getRecheckLossDegree());
        stmt.bindDouble(38, entity.getRecheckLossSum());
        stmt.bindDouble(39, entity.getRecheckUnitRemains());
 
        String recheckFitBackFlag = entity.getRecheckFitBackFlag();
        if (recheckFitBackFlag != null) {
            stmt.bindString(40, recheckFitBackFlag);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CargoFeeInfo readEntity(Cursor cursor, int offset) {
        CargoFeeInfo entity = new CargoFeeInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // reportCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // flowId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // evalId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // createBy
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // updateBy
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // updateDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // cargoType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // cargoTypeCode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // cargoItemName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // riskCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // riskName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // itemCode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // itemName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // feeName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // feeCode
            cursor.getDouble(offset + 17), // evalUnitPrice
            cursor.getDouble(offset + 18), // evalAmount
            cursor.getDouble(offset + 19), // evalLossDegree
            cursor.getDouble(offset + 20), // evalLossSum
            cursor.getDouble(offset + 21), // evalRemains
            cursor.getDouble(offset + 22), // approveUnitPrice
            cursor.getDouble(offset + 23), // approveAmount
            cursor.getDouble(offset + 24), // approveLossDegree
            cursor.getDouble(offset + 25), // approveRemains
            cursor.getDouble(offset + 26), // approveLossSum
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // approveCheckState
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // lossType
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // lossTypeCode
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // fitBackFlag
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // approveFitBackFlag
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // remark
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // recheckFlag
            cursor.getDouble(offset + 34), // recheckUnitPrice
            cursor.getDouble(offset + 35), // recheckAmount
            cursor.getDouble(offset + 36), // recheckLossDegree
            cursor.getDouble(offset + 37), // recheckLossSum
            cursor.getDouble(offset + 38), // recheckUnitRemains
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39) // recheckFitBackFlag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CargoFeeInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setReportCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFlowId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEvalId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateBy(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpdateBy(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdateDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCargoType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCargoTypeCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCargoItemName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRiskCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRiskName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setItemCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setItemName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFeeName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFeeCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setEvalUnitPrice(cursor.getDouble(offset + 17));
        entity.setEvalAmount(cursor.getDouble(offset + 18));
        entity.setEvalLossDegree(cursor.getDouble(offset + 19));
        entity.setEvalLossSum(cursor.getDouble(offset + 20));
        entity.setEvalRemains(cursor.getDouble(offset + 21));
        entity.setApproveUnitPrice(cursor.getDouble(offset + 22));
        entity.setApproveAmount(cursor.getDouble(offset + 23));
        entity.setApproveLossDegree(cursor.getDouble(offset + 24));
        entity.setApproveRemains(cursor.getDouble(offset + 25));
        entity.setApproveLossSum(cursor.getDouble(offset + 26));
        entity.setApproveCheckState(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setLossType(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setLossTypeCode(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setFitBackFlag(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setApproveFitBackFlag(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setRemark(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setRecheckFlag(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setRecheckUnitPrice(cursor.getDouble(offset + 34));
        entity.setRecheckAmount(cursor.getDouble(offset + 35));
        entity.setRecheckLossDegree(cursor.getDouble(offset + 36));
        entity.setRecheckLossSum(cursor.getDouble(offset + 37));
        entity.setRecheckUnitRemains(cursor.getDouble(offset + 38));
        entity.setRecheckFitBackFlag(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CargoFeeInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(CargoFeeInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CargoFeeInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
