package com.hl.contract.table.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hl.contract.table.model.InjuryFeeInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INJURY_FEE_INFO".
*/
public class InjuryFeeInfoDao extends AbstractDao<InjuryFeeInfo, String> {

    public static final String TABLENAME = "INJURY_FEE_INFO";

    /**
     * Properties of entity InjuryFeeInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property TaskNo = new Property(1, String.class, "taskNo", false, "TASK_NO");
        public final static Property ReportCode = new Property(2, String.class, "reportCode", false, "REPORT_CODE");
        public final static Property Feename = new Property(3, String.class, "feename", false, "FEENAME");
        public final static Property Feenamecode = new Property(4, String.class, "feenamecode", false, "FEENAMECODE");
        public final static Property UnitAmount = new Property(5, String.class, "unitAmount", false, "UNIT_AMOUNT");
        public final static Property Amount = new Property(6, String.class, "amount", false, "AMOUNT");
        public final static Property LossAmount = new Property(7, String.class, "lossAmount", false, "LOSS_AMOUNT");
        public final static Property RiskCode = new Property(8, String.class, "riskCode", false, "RISK_CODE");
        public final static Property RiskName = new Property(9, String.class, "riskName", false, "RISK_NAME");
        public final static Property ItemCode = new Property(10, String.class, "itemCode", false, "ITEM_CODE");
        public final static Property ItemName = new Property(11, String.class, "itemName", false, "ITEM_NAME");
        public final static Property FeeRemark = new Property(12, String.class, "feeRemark", false, "FEE_REMARK");
        public final static Property DeleteAmount = new Property(13, String.class, "deleteAmount", false, "DELETE_AMOUNT");
        public final static Property EvalAmount = new Property(14, String.class, "evalAmount", false, "EVAL_AMOUNT");
        public final static Property DeleteComment = new Property(15, String.class, "deleteComment", false, "DELETE_COMMENT");
    }


    public InjuryFeeInfoDao(DaoConfig config) {
        super(config);
    }
    
    public InjuryFeeInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INJURY_FEE_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TASK_NO\" TEXT," + // 1: taskNo
                "\"REPORT_CODE\" TEXT," + // 2: reportCode
                "\"FEENAME\" TEXT," + // 3: feename
                "\"FEENAMECODE\" TEXT," + // 4: feenamecode
                "\"UNIT_AMOUNT\" TEXT," + // 5: unitAmount
                "\"AMOUNT\" TEXT," + // 6: amount
                "\"LOSS_AMOUNT\" TEXT," + // 7: lossAmount
                "\"RISK_CODE\" TEXT," + // 8: riskCode
                "\"RISK_NAME\" TEXT," + // 9: riskName
                "\"ITEM_CODE\" TEXT," + // 10: itemCode
                "\"ITEM_NAME\" TEXT," + // 11: itemName
                "\"FEE_REMARK\" TEXT," + // 12: feeRemark
                "\"DELETE_AMOUNT\" TEXT," + // 13: deleteAmount
                "\"EVAL_AMOUNT\" TEXT," + // 14: evalAmount
                "\"DELETE_COMMENT\" TEXT);"); // 15: deleteComment
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INJURY_FEE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InjuryFeeInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String taskNo = entity.getTaskNo();
        if (taskNo != null) {
            stmt.bindString(2, taskNo);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(3, reportCode);
        }
 
        String feename = entity.getFeename();
        if (feename != null) {
            stmt.bindString(4, feename);
        }
 
        String feenamecode = entity.getFeenamecode();
        if (feenamecode != null) {
            stmt.bindString(5, feenamecode);
        }
 
        String unitAmount = entity.getUnitAmount();
        if (unitAmount != null) {
            stmt.bindString(6, unitAmount);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(7, amount);
        }
 
        String lossAmount = entity.getLossAmount();
        if (lossAmount != null) {
            stmt.bindString(8, lossAmount);
        }
 
        String riskCode = entity.getRiskCode();
        if (riskCode != null) {
            stmt.bindString(9, riskCode);
        }
 
        String riskName = entity.getRiskName();
        if (riskName != null) {
            stmt.bindString(10, riskName);
        }
 
        String itemCode = entity.getItemCode();
        if (itemCode != null) {
            stmt.bindString(11, itemCode);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(12, itemName);
        }
 
        String feeRemark = entity.getFeeRemark();
        if (feeRemark != null) {
            stmt.bindString(13, feeRemark);
        }
 
        String deleteAmount = entity.getDeleteAmount();
        if (deleteAmount != null) {
            stmt.bindString(14, deleteAmount);
        }
 
        String evalAmount = entity.getEvalAmount();
        if (evalAmount != null) {
            stmt.bindString(15, evalAmount);
        }
 
        String deleteComment = entity.getDeleteComment();
        if (deleteComment != null) {
            stmt.bindString(16, deleteComment);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InjuryFeeInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String taskNo = entity.getTaskNo();
        if (taskNo != null) {
            stmt.bindString(2, taskNo);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(3, reportCode);
        }
 
        String feename = entity.getFeename();
        if (feename != null) {
            stmt.bindString(4, feename);
        }
 
        String feenamecode = entity.getFeenamecode();
        if (feenamecode != null) {
            stmt.bindString(5, feenamecode);
        }
 
        String unitAmount = entity.getUnitAmount();
        if (unitAmount != null) {
            stmt.bindString(6, unitAmount);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(7, amount);
        }
 
        String lossAmount = entity.getLossAmount();
        if (lossAmount != null) {
            stmt.bindString(8, lossAmount);
        }
 
        String riskCode = entity.getRiskCode();
        if (riskCode != null) {
            stmt.bindString(9, riskCode);
        }
 
        String riskName = entity.getRiskName();
        if (riskName != null) {
            stmt.bindString(10, riskName);
        }
 
        String itemCode = entity.getItemCode();
        if (itemCode != null) {
            stmt.bindString(11, itemCode);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(12, itemName);
        }
 
        String feeRemark = entity.getFeeRemark();
        if (feeRemark != null) {
            stmt.bindString(13, feeRemark);
        }
 
        String deleteAmount = entity.getDeleteAmount();
        if (deleteAmount != null) {
            stmt.bindString(14, deleteAmount);
        }
 
        String evalAmount = entity.getEvalAmount();
        if (evalAmount != null) {
            stmt.bindString(15, evalAmount);
        }
 
        String deleteComment = entity.getDeleteComment();
        if (deleteComment != null) {
            stmt.bindString(16, deleteComment);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public InjuryFeeInfo readEntity(Cursor cursor, int offset) {
        InjuryFeeInfo entity = new InjuryFeeInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taskNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // reportCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // feename
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // feenamecode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // unitAmount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // amount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lossAmount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // riskCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // riskName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // itemCode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // itemName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // feeRemark
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // deleteAmount
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // evalAmount
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // deleteComment
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InjuryFeeInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTaskNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReportCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFeename(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFeenamecode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUnitAmount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAmount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLossAmount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRiskCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRiskName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setItemCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setItemName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFeeRemark(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDeleteAmount(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setEvalAmount(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDeleteComment(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final String updateKeyAfterInsert(InjuryFeeInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(InjuryFeeInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InjuryFeeInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
