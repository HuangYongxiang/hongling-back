package com.hl.contract.table.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hl.contract.table.model.InjuryHospitalInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INJURY_HOSPITAL_INFO".
*/
public class InjuryHospitalInfoDao extends AbstractDao<InjuryHospitalInfo, String> {

    public static final String TABLENAME = "INJURY_HOSPITAL_INFO";

    /**
     * Properties of entity InjuryHospitalInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property TaskNo = new Property(1, String.class, "taskNo", false, "TASK_NO");
        public final static Property ReportCode = new Property(2, String.class, "reportCode", false, "REPORT_CODE");
        public final static Property VisitHospital = new Property(3, String.class, "visitHospital", false, "VISIT_HOSPITAL");
        public final static Property Indate = new Property(4, String.class, "indate", false, "INDATE");
        public final static Property Outdate = new Property(5, String.class, "outdate", false, "OUTDATE");
        public final static Property LiveDays = new Property(6, String.class, "liveDays", false, "LIVE_DAYS");
        public final static Property CrudeDays = new Property(7, String.class, "crudeDays", false, "CRUDE_DAYS");
        public final static Property AttendDoctor = new Property(8, String.class, "attendDoctor", false, "ATTEND_DOCTOR");
        public final static Property AttendDoctorPhone = new Property(9, String.class, "attendDoctorPhone", false, "ATTEND_DOCTOR_PHONE");
        public final static Property IncurredFee = new Property(10, String.class, "incurredFee", false, "INCURRED_FEE");
        public final static Property RemainFee = new Property(11, String.class, "remainFee", false, "REMAIN_FEE");
        public final static Property DeleteFee = new Property(12, String.class, "deleteFee", false, "DELETE_FEE");
        public final static Property CrudeWay = new Property(13, String.class, "crudeWay", false, "CRUDE_WAY");
        public final static Property CrudeWayCode = new Property(14, String.class, "crudeWayCode", false, "CRUDE_WAY_CODE");
        public final static Property DiagnosisDescribe = new Property(15, String.class, "diagnosisDescribe", false, "DIAGNOSIS_DESCRIBE");
        public final static Property TreatmentCondition = new Property(16, String.class, "treatmentCondition", false, "TREATMENT_CONDITION");
        public final static Property NeedTransfer = new Property(17, String.class, "needTransfer", false, "NEED_TRANSFER");
        public final static Property NeedTransferCode = new Property(18, String.class, "needTransferCode", false, "NEED_TRANSFER_CODE");
    }


    public InjuryHospitalInfoDao(DaoConfig config) {
        super(config);
    }
    
    public InjuryHospitalInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INJURY_HOSPITAL_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TASK_NO\" TEXT," + // 1: taskNo
                "\"REPORT_CODE\" TEXT," + // 2: reportCode
                "\"VISIT_HOSPITAL\" TEXT," + // 3: visitHospital
                "\"INDATE\" TEXT," + // 4: indate
                "\"OUTDATE\" TEXT," + // 5: outdate
                "\"LIVE_DAYS\" TEXT," + // 6: liveDays
                "\"CRUDE_DAYS\" TEXT," + // 7: crudeDays
                "\"ATTEND_DOCTOR\" TEXT," + // 8: attendDoctor
                "\"ATTEND_DOCTOR_PHONE\" TEXT," + // 9: attendDoctorPhone
                "\"INCURRED_FEE\" TEXT," + // 10: incurredFee
                "\"REMAIN_FEE\" TEXT," + // 11: remainFee
                "\"DELETE_FEE\" TEXT," + // 12: deleteFee
                "\"CRUDE_WAY\" TEXT," + // 13: crudeWay
                "\"CRUDE_WAY_CODE\" TEXT," + // 14: crudeWayCode
                "\"DIAGNOSIS_DESCRIBE\" TEXT," + // 15: diagnosisDescribe
                "\"TREATMENT_CONDITION\" TEXT," + // 16: treatmentCondition
                "\"NEED_TRANSFER\" TEXT," + // 17: needTransfer
                "\"NEED_TRANSFER_CODE\" TEXT);"); // 18: needTransferCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INJURY_HOSPITAL_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InjuryHospitalInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String taskNo = entity.getTaskNo();
        if (taskNo != null) {
            stmt.bindString(2, taskNo);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(3, reportCode);
        }
 
        String visitHospital = entity.getVisitHospital();
        if (visitHospital != null) {
            stmt.bindString(4, visitHospital);
        }
 
        String indate = entity.getIndate();
        if (indate != null) {
            stmt.bindString(5, indate);
        }
 
        String outdate = entity.getOutdate();
        if (outdate != null) {
            stmt.bindString(6, outdate);
        }
 
        String liveDays = entity.getLiveDays();
        if (liveDays != null) {
            stmt.bindString(7, liveDays);
        }
 
        String crudeDays = entity.getCrudeDays();
        if (crudeDays != null) {
            stmt.bindString(8, crudeDays);
        }
 
        String attendDoctor = entity.getAttendDoctor();
        if (attendDoctor != null) {
            stmt.bindString(9, attendDoctor);
        }
 
        String attendDoctorPhone = entity.getAttendDoctorPhone();
        if (attendDoctorPhone != null) {
            stmt.bindString(10, attendDoctorPhone);
        }
 
        String incurredFee = entity.getIncurredFee();
        if (incurredFee != null) {
            stmt.bindString(11, incurredFee);
        }
 
        String remainFee = entity.getRemainFee();
        if (remainFee != null) {
            stmt.bindString(12, remainFee);
        }
 
        String deleteFee = entity.getDeleteFee();
        if (deleteFee != null) {
            stmt.bindString(13, deleteFee);
        }
 
        String crudeWay = entity.getCrudeWay();
        if (crudeWay != null) {
            stmt.bindString(14, crudeWay);
        }
 
        String crudeWayCode = entity.getCrudeWayCode();
        if (crudeWayCode != null) {
            stmt.bindString(15, crudeWayCode);
        }
 
        String diagnosisDescribe = entity.getDiagnosisDescribe();
        if (diagnosisDescribe != null) {
            stmt.bindString(16, diagnosisDescribe);
        }
 
        String treatmentCondition = entity.getTreatmentCondition();
        if (treatmentCondition != null) {
            stmt.bindString(17, treatmentCondition);
        }
 
        String needTransfer = entity.getNeedTransfer();
        if (needTransfer != null) {
            stmt.bindString(18, needTransfer);
        }
 
        String needTransferCode = entity.getNeedTransferCode();
        if (needTransferCode != null) {
            stmt.bindString(19, needTransferCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InjuryHospitalInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String taskNo = entity.getTaskNo();
        if (taskNo != null) {
            stmt.bindString(2, taskNo);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(3, reportCode);
        }
 
        String visitHospital = entity.getVisitHospital();
        if (visitHospital != null) {
            stmt.bindString(4, visitHospital);
        }
 
        String indate = entity.getIndate();
        if (indate != null) {
            stmt.bindString(5, indate);
        }
 
        String outdate = entity.getOutdate();
        if (outdate != null) {
            stmt.bindString(6, outdate);
        }
 
        String liveDays = entity.getLiveDays();
        if (liveDays != null) {
            stmt.bindString(7, liveDays);
        }
 
        String crudeDays = entity.getCrudeDays();
        if (crudeDays != null) {
            stmt.bindString(8, crudeDays);
        }
 
        String attendDoctor = entity.getAttendDoctor();
        if (attendDoctor != null) {
            stmt.bindString(9, attendDoctor);
        }
 
        String attendDoctorPhone = entity.getAttendDoctorPhone();
        if (attendDoctorPhone != null) {
            stmt.bindString(10, attendDoctorPhone);
        }
 
        String incurredFee = entity.getIncurredFee();
        if (incurredFee != null) {
            stmt.bindString(11, incurredFee);
        }
 
        String remainFee = entity.getRemainFee();
        if (remainFee != null) {
            stmt.bindString(12, remainFee);
        }
 
        String deleteFee = entity.getDeleteFee();
        if (deleteFee != null) {
            stmt.bindString(13, deleteFee);
        }
 
        String crudeWay = entity.getCrudeWay();
        if (crudeWay != null) {
            stmt.bindString(14, crudeWay);
        }
 
        String crudeWayCode = entity.getCrudeWayCode();
        if (crudeWayCode != null) {
            stmt.bindString(15, crudeWayCode);
        }
 
        String diagnosisDescribe = entity.getDiagnosisDescribe();
        if (diagnosisDescribe != null) {
            stmt.bindString(16, diagnosisDescribe);
        }
 
        String treatmentCondition = entity.getTreatmentCondition();
        if (treatmentCondition != null) {
            stmt.bindString(17, treatmentCondition);
        }
 
        String needTransfer = entity.getNeedTransfer();
        if (needTransfer != null) {
            stmt.bindString(18, needTransfer);
        }
 
        String needTransferCode = entity.getNeedTransferCode();
        if (needTransferCode != null) {
            stmt.bindString(19, needTransferCode);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public InjuryHospitalInfo readEntity(Cursor cursor, int offset) {
        InjuryHospitalInfo entity = new InjuryHospitalInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taskNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // reportCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // visitHospital
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // indate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // outdate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // liveDays
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // crudeDays
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // attendDoctor
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // attendDoctorPhone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // incurredFee
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // remainFee
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // deleteFee
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // crudeWay
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // crudeWayCode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // diagnosisDescribe
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // treatmentCondition
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // needTransfer
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // needTransferCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InjuryHospitalInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTaskNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReportCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVisitHospital(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIndate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOutdate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLiveDays(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCrudeDays(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAttendDoctor(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAttendDoctorPhone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIncurredFee(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRemainFee(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDeleteFee(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCrudeWay(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCrudeWayCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDiagnosisDescribe(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTreatmentCondition(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setNeedTransfer(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setNeedTransferCode(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final String updateKeyAfterInsert(InjuryHospitalInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(InjuryHospitalInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InjuryHospitalInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
