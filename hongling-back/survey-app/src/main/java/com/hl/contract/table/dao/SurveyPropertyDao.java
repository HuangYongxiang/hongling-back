package com.hl.contract.table.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hl.contract.table.model.SurveyProperty;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SURVEY_PROPERTY".
*/
public class SurveyPropertyDao extends AbstractDao<SurveyProperty, String> {

    public static final String TABLENAME = "SURVEY_PROPERTY";

    /**
     * Properties of entity SurveyProperty.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property ReportCode = new Property(1, String.class, "reportCode", false, "REPORT_CODE");
        public final static Property FlowId = new Property(2, String.class, "flowId", false, "FLOW_ID");
        public final static Property AscriptionType = new Property(3, String.class, "ascriptionType", false, "ASCRIPTION_TYPE");
        public final static Property AscriptionTypeCode = new Property(4, String.class, "ascriptionTypeCode", false, "ASCRIPTION_TYPE_CODE");
        public final static Property LossName = new Property(5, String.class, "lossName", false, "LOSS_NAME");
        public final static Property RiskName = new Property(6, String.class, "riskName", false, "RISK_NAME");
        public final static Property RiskCode = new Property(7, String.class, "riskCode", false, "RISK_CODE");
        public final static Property ExpensesName = new Property(8, String.class, "expensesName", false, "EXPENSES_NAME");
        public final static Property LossPrice = new Property(9, double.class, "lossPrice", false, "LOSS_PRICE");
        public final static Property LossDegreeDescription = new Property(10, String.class, "lossDegreeDescription", false, "LOSS_DEGREE_DESCRIPTION");
        public final static Property SerialNo = new Property(11, Integer.class, "serialNo", false, "SERIAL_NO");
        public final static Property AdditionalFlag = new Property(12, String.class, "additionalFlag", false, "ADDITIONAL_FLAG");
    }


    public SurveyPropertyDao(DaoConfig config) {
        super(config);
    }
    
    public SurveyPropertyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SURVEY_PROPERTY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"REPORT_CODE\" TEXT," + // 1: reportCode
                "\"FLOW_ID\" TEXT," + // 2: flowId
                "\"ASCRIPTION_TYPE\" TEXT," + // 3: ascriptionType
                "\"ASCRIPTION_TYPE_CODE\" TEXT," + // 4: ascriptionTypeCode
                "\"LOSS_NAME\" TEXT," + // 5: lossName
                "\"RISK_NAME\" TEXT," + // 6: riskName
                "\"RISK_CODE\" TEXT," + // 7: riskCode
                "\"EXPENSES_NAME\" TEXT," + // 8: expensesName
                "\"LOSS_PRICE\" REAL NOT NULL ," + // 9: lossPrice
                "\"LOSS_DEGREE_DESCRIPTION\" TEXT," + // 10: lossDegreeDescription
                "\"SERIAL_NO\" INTEGER," + // 11: serialNo
                "\"ADDITIONAL_FLAG\" TEXT);"); // 12: additionalFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SURVEY_PROPERTY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SurveyProperty entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(2, reportCode);
        }
 
        String flowId = entity.getFlowId();
        if (flowId != null) {
            stmt.bindString(3, flowId);
        }
 
        String ascriptionType = entity.getAscriptionType();
        if (ascriptionType != null) {
            stmt.bindString(4, ascriptionType);
        }
 
        String ascriptionTypeCode = entity.getAscriptionTypeCode();
        if (ascriptionTypeCode != null) {
            stmt.bindString(5, ascriptionTypeCode);
        }
 
        String lossName = entity.getLossName();
        if (lossName != null) {
            stmt.bindString(6, lossName);
        }
 
        String riskName = entity.getRiskName();
        if (riskName != null) {
            stmt.bindString(7, riskName);
        }
 
        String riskCode = entity.getRiskCode();
        if (riskCode != null) {
            stmt.bindString(8, riskCode);
        }
 
        String expensesName = entity.getExpensesName();
        if (expensesName != null) {
            stmt.bindString(9, expensesName);
        }
        stmt.bindDouble(10, entity.getLossPrice());
 
        String lossDegreeDescription = entity.getLossDegreeDescription();
        if (lossDegreeDescription != null) {
            stmt.bindString(11, lossDegreeDescription);
        }
 
        Integer serialNo = entity.getSerialNo();
        if (serialNo != null) {
            stmt.bindLong(12, serialNo);
        }
 
        String additionalFlag = entity.getAdditionalFlag();
        if (additionalFlag != null) {
            stmt.bindString(13, additionalFlag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SurveyProperty entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(2, reportCode);
        }
 
        String flowId = entity.getFlowId();
        if (flowId != null) {
            stmt.bindString(3, flowId);
        }
 
        String ascriptionType = entity.getAscriptionType();
        if (ascriptionType != null) {
            stmt.bindString(4, ascriptionType);
        }
 
        String ascriptionTypeCode = entity.getAscriptionTypeCode();
        if (ascriptionTypeCode != null) {
            stmt.bindString(5, ascriptionTypeCode);
        }
 
        String lossName = entity.getLossName();
        if (lossName != null) {
            stmt.bindString(6, lossName);
        }
 
        String riskName = entity.getRiskName();
        if (riskName != null) {
            stmt.bindString(7, riskName);
        }
 
        String riskCode = entity.getRiskCode();
        if (riskCode != null) {
            stmt.bindString(8, riskCode);
        }
 
        String expensesName = entity.getExpensesName();
        if (expensesName != null) {
            stmt.bindString(9, expensesName);
        }
        stmt.bindDouble(10, entity.getLossPrice());
 
        String lossDegreeDescription = entity.getLossDegreeDescription();
        if (lossDegreeDescription != null) {
            stmt.bindString(11, lossDegreeDescription);
        }
 
        Integer serialNo = entity.getSerialNo();
        if (serialNo != null) {
            stmt.bindLong(12, serialNo);
        }
 
        String additionalFlag = entity.getAdditionalFlag();
        if (additionalFlag != null) {
            stmt.bindString(13, additionalFlag);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SurveyProperty readEntity(Cursor cursor, int offset) {
        SurveyProperty entity = new SurveyProperty( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // reportCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // flowId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ascriptionType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ascriptionTypeCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lossName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // riskName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // riskCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // expensesName
            cursor.getDouble(offset + 9), // lossPrice
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // lossDegreeDescription
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // serialNo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // additionalFlag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SurveyProperty entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setReportCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFlowId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAscriptionType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAscriptionTypeCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLossName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRiskName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRiskCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExpensesName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLossPrice(cursor.getDouble(offset + 9));
        entity.setLossDegreeDescription(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSerialNo(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setAdditionalFlag(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SurveyProperty entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SurveyProperty entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SurveyProperty entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
