package com.hl.contract.table.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hl.contract.table.model.InsuranceItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INSURANCE_ITEM".
*/
public class InsuranceItemDao extends AbstractDao<InsuranceItem, String> {

    public static final String TABLENAME = "INSURANCE_ITEM";

    /**
     * Properties of entity InsuranceItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property LossNo = new Property(1, String.class, "lossNo", false, "LOSS_NO");
        public final static Property InsureTerm = new Property(2, String.class, "insureTerm", false, "INSURE_TERM");
        public final static Property InsureTermCode = new Property(3, String.class, "insureTermCode", false, "INSURE_TERM_CODE");
    }


    public InsuranceItemDao(DaoConfig config) {
        super(config);
    }
    
    public InsuranceItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INSURANCE_ITEM\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"LOSS_NO\" TEXT," + // 1: lossNo
                "\"INSURE_TERM\" TEXT," + // 2: insureTerm
                "\"INSURE_TERM_CODE\" TEXT);"); // 3: insureTermCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INSURANCE_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InsuranceItem entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String lossNo = entity.getLossNo();
        if (lossNo != null) {
            stmt.bindString(2, lossNo);
        }
 
        String insureTerm = entity.getInsureTerm();
        if (insureTerm != null) {
            stmt.bindString(3, insureTerm);
        }
 
        String insureTermCode = entity.getInsureTermCode();
        if (insureTermCode != null) {
            stmt.bindString(4, insureTermCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InsuranceItem entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String lossNo = entity.getLossNo();
        if (lossNo != null) {
            stmt.bindString(2, lossNo);
        }
 
        String insureTerm = entity.getInsureTerm();
        if (insureTerm != null) {
            stmt.bindString(3, insureTerm);
        }
 
        String insureTermCode = entity.getInsureTermCode();
        if (insureTermCode != null) {
            stmt.bindString(4, insureTermCode);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public InsuranceItem readEntity(Cursor cursor, int offset) {
        InsuranceItem entity = new InsuranceItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lossNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // insureTerm
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // insureTermCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InsuranceItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLossNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInsureTerm(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInsureTermCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(InsuranceItem entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(InsuranceItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InsuranceItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
