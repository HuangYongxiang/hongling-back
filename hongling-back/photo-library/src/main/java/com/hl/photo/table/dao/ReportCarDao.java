package com.hl.photo.table.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hl.photo.table.model.ReportCar;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REPORT_CAR".
*/
public class ReportCarDao extends AbstractDao<ReportCar, String> {

    public static final String TABLENAME = "REPORT_CAR";

    /**
     * Properties of entity ReportCar.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property FlowId = new Property(1, String.class, "flowId", false, "FLOW_ID");
        public final static Property EvalId = new Property(2, String.class, "evalId", false, "EVAL_ID");
        public final static Property ReportCode = new Property(3, String.class, "reportCode", false, "REPORT_CODE");
        public final static Property CarType = new Property(4, String.class, "carType", false, "CAR_TYPE");
        public final static Property CarTypeCode = new Property(5, String.class, "carTypeCode", false, "CAR_TYPE_CODE");
        public final static Property VehicleModel = new Property(6, String.class, "vehicleModel", false, "VEHICLE_MODEL");
        public final static Property VehicleModelCode = new Property(7, String.class, "vehicleModelCode", false, "VEHICLE_MODEL_CODE");
        public final static Property EngineNo = new Property(8, String.class, "engineNo", false, "ENGINE_NO");
        public final static Property VinNo = new Property(9, String.class, "vinNo", false, "VIN_NO");
        public final static Property PlateNo = new Property(10, String.class, "plateNo", false, "PLATE_NO");
        public final static Property PlateType = new Property(11, String.class, "plateType", false, "PLATE_TYPE");
        public final static Property PlateTypeCode = new Property(12, String.class, "plateTypeCode", false, "PLATE_TYPE_CODE");
        public final static Property IsMainCarDamaged = new Property(13, String.class, "isMainCarDamaged", false, "IS_MAIN_CAR_DAMAGED");
        public final static Property AmountDamages = new Property(14, Double.class, "amountDamages", false, "AMOUNT_DAMAGES");
        public final static Property DutyRatio = new Property(15, String.class, "dutyRatio", false, "DUTY_RATIO");
        public final static Property InsurancePolicyNo = new Property(16, String.class, "insurancePolicyNo", false, "INSURANCE_POLICY_NO");
        public final static Property InsuranceCompany = new Property(17, String.class, "insuranceCompany", false, "INSURANCE_COMPANY");
        public final static Property CommercialPolicyNo = new Property(18, String.class, "commercialPolicyNo", false, "COMMERCIAL_POLICY_NO");
        public final static Property CommercialCompany = new Property(19, String.class, "commercialCompany", false, "COMMERCIAL_COMPANY");
        public final static Property VehicleType = new Property(20, String.class, "vehicleType", false, "VEHICLE_TYPE");
        public final static Property VehicleTypeCode = new Property(21, String.class, "vehicleTypeCode", false, "VEHICLE_TYPE_CODE");
        public final static Property UseProperty = new Property(22, String.class, "useProperty", false, "USE_PROPERTY");
        public final static Property UsePropertyCode = new Property(23, String.class, "usePropertyCode", false, "USE_PROPERTY_CODE");
        public final static Property VehiclePrice = new Property(24, Double.class, "vehiclePrice", false, "VEHICLE_PRICE");
        public final static Property RealPrice = new Property(25, Double.class, "realPrice", false, "REAL_PRICE");
        public final static Property IsImport = new Property(26, String.class, "isImport", false, "IS_IMPORT");
        public final static Property MakeDate = new Property(27, String.class, "makeDate", false, "MAKE_DATE");
        public final static Property EnrolDate = new Property(28, String.class, "enrolDate", false, "ENROL_DATE");
        public final static Property Seat = new Property(29, int.class, "seat", false, "SEAT");
        public final static Property Power = new Property(30, String.class, "power", false, "POWER");
        public final static Property Displacement = new Property(31, String.class, "displacement", false, "DISPLACEMENT");
        public final static Property Tonnage = new Property(32, Double.class, "tonnage", false, "TONNAGE");
        public final static Property CarColor = new Property(33, String.class, "carColor", false, "CAR_COLOR");
        public final static Property PlateColor = new Property(34, String.class, "plateColor", false, "PLATE_COLOR");
        public final static Property PlateColorCode = new Property(35, String.class, "plateColorCode", false, "PLATE_COLOR_CODE");
        public final static Property GuardAlarm = new Property(36, String.class, "guardAlarm", false, "GUARD_ALARM");
        public final static Property ExemptFlag = new Property(37, String.class, "exemptFlag", false, "EXEMPT_FLAG");
        public final static Property DriverArea = new Property(38, String.class, "driverArea", false, "DRIVER_AREA");
        public final static Property SerialNo = new Property(39, Integer.class, "serialNo", false, "SERIAL_NO");
        public final static Property AdditionalFlag = new Property(40, String.class, "additionalFlag", false, "ADDITIONAL_FLAG");
    }


    public ReportCarDao(DaoConfig config) {
        super(config);
    }
    
    public ReportCarDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REPORT_CAR\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"FLOW_ID\" TEXT," + // 1: flowId
                "\"EVAL_ID\" TEXT," + // 2: evalId
                "\"REPORT_CODE\" TEXT," + // 3: reportCode
                "\"CAR_TYPE\" TEXT," + // 4: carType
                "\"CAR_TYPE_CODE\" TEXT," + // 5: carTypeCode
                "\"VEHICLE_MODEL\" TEXT," + // 6: vehicleModel
                "\"VEHICLE_MODEL_CODE\" TEXT," + // 7: vehicleModelCode
                "\"ENGINE_NO\" TEXT," + // 8: engineNo
                "\"VIN_NO\" TEXT," + // 9: vinNo
                "\"PLATE_NO\" TEXT," + // 10: plateNo
                "\"PLATE_TYPE\" TEXT," + // 11: plateType
                "\"PLATE_TYPE_CODE\" TEXT," + // 12: plateTypeCode
                "\"IS_MAIN_CAR_DAMAGED\" TEXT," + // 13: isMainCarDamaged
                "\"AMOUNT_DAMAGES\" REAL," + // 14: amountDamages
                "\"DUTY_RATIO\" TEXT," + // 15: dutyRatio
                "\"INSURANCE_POLICY_NO\" TEXT," + // 16: insurancePolicyNo
                "\"INSURANCE_COMPANY\" TEXT," + // 17: insuranceCompany
                "\"COMMERCIAL_POLICY_NO\" TEXT," + // 18: commercialPolicyNo
                "\"COMMERCIAL_COMPANY\" TEXT," + // 19: commercialCompany
                "\"VEHICLE_TYPE\" TEXT," + // 20: vehicleType
                "\"VEHICLE_TYPE_CODE\" TEXT," + // 21: vehicleTypeCode
                "\"USE_PROPERTY\" TEXT," + // 22: useProperty
                "\"USE_PROPERTY_CODE\" TEXT," + // 23: usePropertyCode
                "\"VEHICLE_PRICE\" REAL," + // 24: vehiclePrice
                "\"REAL_PRICE\" REAL," + // 25: realPrice
                "\"IS_IMPORT\" TEXT," + // 26: isImport
                "\"MAKE_DATE\" TEXT," + // 27: makeDate
                "\"ENROL_DATE\" TEXT," + // 28: enrolDate
                "\"SEAT\" INTEGER NOT NULL ," + // 29: seat
                "\"POWER\" TEXT," + // 30: power
                "\"DISPLACEMENT\" TEXT," + // 31: displacement
                "\"TONNAGE\" REAL," + // 32: tonnage
                "\"CAR_COLOR\" TEXT," + // 33: carColor
                "\"PLATE_COLOR\" TEXT," + // 34: plateColor
                "\"PLATE_COLOR_CODE\" TEXT," + // 35: plateColorCode
                "\"GUARD_ALARM\" TEXT," + // 36: guardAlarm
                "\"EXEMPT_FLAG\" TEXT," + // 37: exemptFlag
                "\"DRIVER_AREA\" TEXT," + // 38: driverArea
                "\"SERIAL_NO\" INTEGER," + // 39: serialNo
                "\"ADDITIONAL_FLAG\" TEXT);"); // 40: additionalFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REPORT_CAR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReportCar entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String flowId = entity.getFlowId();
        if (flowId != null) {
            stmt.bindString(2, flowId);
        }
 
        String evalId = entity.getEvalId();
        if (evalId != null) {
            stmt.bindString(3, evalId);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(4, reportCode);
        }
 
        String carType = entity.getCarType();
        if (carType != null) {
            stmt.bindString(5, carType);
        }
 
        String carTypeCode = entity.getCarTypeCode();
        if (carTypeCode != null) {
            stmt.bindString(6, carTypeCode);
        }
 
        String vehicleModel = entity.getVehicleModel();
        if (vehicleModel != null) {
            stmt.bindString(7, vehicleModel);
        }
 
        String vehicleModelCode = entity.getVehicleModelCode();
        if (vehicleModelCode != null) {
            stmt.bindString(8, vehicleModelCode);
        }
 
        String engineNo = entity.getEngineNo();
        if (engineNo != null) {
            stmt.bindString(9, engineNo);
        }
 
        String vinNo = entity.getVinNo();
        if (vinNo != null) {
            stmt.bindString(10, vinNo);
        }
 
        String plateNo = entity.getPlateNo();
        if (plateNo != null) {
            stmt.bindString(11, plateNo);
        }
 
        String plateType = entity.getPlateType();
        if (plateType != null) {
            stmt.bindString(12, plateType);
        }
 
        String plateTypeCode = entity.getPlateTypeCode();
        if (plateTypeCode != null) {
            stmt.bindString(13, plateTypeCode);
        }
 
        String isMainCarDamaged = entity.getIsMainCarDamaged();
        if (isMainCarDamaged != null) {
            stmt.bindString(14, isMainCarDamaged);
        }
 
        Double amountDamages = entity.getAmountDamages();
        if (amountDamages != null) {
            stmt.bindDouble(15, amountDamages);
        }
 
        String dutyRatio = entity.getDutyRatio();
        if (dutyRatio != null) {
            stmt.bindString(16, dutyRatio);
        }
 
        String insurancePolicyNo = entity.getInsurancePolicyNo();
        if (insurancePolicyNo != null) {
            stmt.bindString(17, insurancePolicyNo);
        }
 
        String insuranceCompany = entity.getInsuranceCompany();
        if (insuranceCompany != null) {
            stmt.bindString(18, insuranceCompany);
        }
 
        String commercialPolicyNo = entity.getCommercialPolicyNo();
        if (commercialPolicyNo != null) {
            stmt.bindString(19, commercialPolicyNo);
        }
 
        String commercialCompany = entity.getCommercialCompany();
        if (commercialCompany != null) {
            stmt.bindString(20, commercialCompany);
        }
 
        String vehicleType = entity.getVehicleType();
        if (vehicleType != null) {
            stmt.bindString(21, vehicleType);
        }
 
        String vehicleTypeCode = entity.getVehicleTypeCode();
        if (vehicleTypeCode != null) {
            stmt.bindString(22, vehicleTypeCode);
        }
 
        String useProperty = entity.getUseProperty();
        if (useProperty != null) {
            stmt.bindString(23, useProperty);
        }
 
        String usePropertyCode = entity.getUsePropertyCode();
        if (usePropertyCode != null) {
            stmt.bindString(24, usePropertyCode);
        }
 
        Double vehiclePrice = entity.getVehiclePrice();
        if (vehiclePrice != null) {
            stmt.bindDouble(25, vehiclePrice);
        }
 
        Double realPrice = entity.getRealPrice();
        if (realPrice != null) {
            stmt.bindDouble(26, realPrice);
        }
 
        String isImport = entity.getIsImport();
        if (isImport != null) {
            stmt.bindString(27, isImport);
        }
 
        String makeDate = entity.getMakeDate();
        if (makeDate != null) {
            stmt.bindString(28, makeDate);
        }
 
        String enrolDate = entity.getEnrolDate();
        if (enrolDate != null) {
            stmt.bindString(29, enrolDate);
        }
        stmt.bindLong(30, entity.getSeat());
 
        String power = entity.getPower();
        if (power != null) {
            stmt.bindString(31, power);
        }
 
        String displacement = entity.getDisplacement();
        if (displacement != null) {
            stmt.bindString(32, displacement);
        }
 
        Double tonnage = entity.getTonnage();
        if (tonnage != null) {
            stmt.bindDouble(33, tonnage);
        }
 
        String carColor = entity.getCarColor();
        if (carColor != null) {
            stmt.bindString(34, carColor);
        }
 
        String plateColor = entity.getPlateColor();
        if (plateColor != null) {
            stmt.bindString(35, plateColor);
        }
 
        String plateColorCode = entity.getPlateColorCode();
        if (plateColorCode != null) {
            stmt.bindString(36, plateColorCode);
        }
 
        String guardAlarm = entity.getGuardAlarm();
        if (guardAlarm != null) {
            stmt.bindString(37, guardAlarm);
        }
 
        String exemptFlag = entity.getExemptFlag();
        if (exemptFlag != null) {
            stmt.bindString(38, exemptFlag);
        }
 
        String driverArea = entity.getDriverArea();
        if (driverArea != null) {
            stmt.bindString(39, driverArea);
        }
 
        Integer serialNo = entity.getSerialNo();
        if (serialNo != null) {
            stmt.bindLong(40, serialNo);
        }
 
        String additionalFlag = entity.getAdditionalFlag();
        if (additionalFlag != null) {
            stmt.bindString(41, additionalFlag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReportCar entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String flowId = entity.getFlowId();
        if (flowId != null) {
            stmt.bindString(2, flowId);
        }
 
        String evalId = entity.getEvalId();
        if (evalId != null) {
            stmt.bindString(3, evalId);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(4, reportCode);
        }
 
        String carType = entity.getCarType();
        if (carType != null) {
            stmt.bindString(5, carType);
        }
 
        String carTypeCode = entity.getCarTypeCode();
        if (carTypeCode != null) {
            stmt.bindString(6, carTypeCode);
        }
 
        String vehicleModel = entity.getVehicleModel();
        if (vehicleModel != null) {
            stmt.bindString(7, vehicleModel);
        }
 
        String vehicleModelCode = entity.getVehicleModelCode();
        if (vehicleModelCode != null) {
            stmt.bindString(8, vehicleModelCode);
        }
 
        String engineNo = entity.getEngineNo();
        if (engineNo != null) {
            stmt.bindString(9, engineNo);
        }
 
        String vinNo = entity.getVinNo();
        if (vinNo != null) {
            stmt.bindString(10, vinNo);
        }
 
        String plateNo = entity.getPlateNo();
        if (plateNo != null) {
            stmt.bindString(11, plateNo);
        }
 
        String plateType = entity.getPlateType();
        if (plateType != null) {
            stmt.bindString(12, plateType);
        }
 
        String plateTypeCode = entity.getPlateTypeCode();
        if (plateTypeCode != null) {
            stmt.bindString(13, plateTypeCode);
        }
 
        String isMainCarDamaged = entity.getIsMainCarDamaged();
        if (isMainCarDamaged != null) {
            stmt.bindString(14, isMainCarDamaged);
        }
 
        Double amountDamages = entity.getAmountDamages();
        if (amountDamages != null) {
            stmt.bindDouble(15, amountDamages);
        }
 
        String dutyRatio = entity.getDutyRatio();
        if (dutyRatio != null) {
            stmt.bindString(16, dutyRatio);
        }
 
        String insurancePolicyNo = entity.getInsurancePolicyNo();
        if (insurancePolicyNo != null) {
            stmt.bindString(17, insurancePolicyNo);
        }
 
        String insuranceCompany = entity.getInsuranceCompany();
        if (insuranceCompany != null) {
            stmt.bindString(18, insuranceCompany);
        }
 
        String commercialPolicyNo = entity.getCommercialPolicyNo();
        if (commercialPolicyNo != null) {
            stmt.bindString(19, commercialPolicyNo);
        }
 
        String commercialCompany = entity.getCommercialCompany();
        if (commercialCompany != null) {
            stmt.bindString(20, commercialCompany);
        }
 
        String vehicleType = entity.getVehicleType();
        if (vehicleType != null) {
            stmt.bindString(21, vehicleType);
        }
 
        String vehicleTypeCode = entity.getVehicleTypeCode();
        if (vehicleTypeCode != null) {
            stmt.bindString(22, vehicleTypeCode);
        }
 
        String useProperty = entity.getUseProperty();
        if (useProperty != null) {
            stmt.bindString(23, useProperty);
        }
 
        String usePropertyCode = entity.getUsePropertyCode();
        if (usePropertyCode != null) {
            stmt.bindString(24, usePropertyCode);
        }
 
        Double vehiclePrice = entity.getVehiclePrice();
        if (vehiclePrice != null) {
            stmt.bindDouble(25, vehiclePrice);
        }
 
        Double realPrice = entity.getRealPrice();
        if (realPrice != null) {
            stmt.bindDouble(26, realPrice);
        }
 
        String isImport = entity.getIsImport();
        if (isImport != null) {
            stmt.bindString(27, isImport);
        }
 
        String makeDate = entity.getMakeDate();
        if (makeDate != null) {
            stmt.bindString(28, makeDate);
        }
 
        String enrolDate = entity.getEnrolDate();
        if (enrolDate != null) {
            stmt.bindString(29, enrolDate);
        }
        stmt.bindLong(30, entity.getSeat());
 
        String power = entity.getPower();
        if (power != null) {
            stmt.bindString(31, power);
        }
 
        String displacement = entity.getDisplacement();
        if (displacement != null) {
            stmt.bindString(32, displacement);
        }
 
        Double tonnage = entity.getTonnage();
        if (tonnage != null) {
            stmt.bindDouble(33, tonnage);
        }
 
        String carColor = entity.getCarColor();
        if (carColor != null) {
            stmt.bindString(34, carColor);
        }
 
        String plateColor = entity.getPlateColor();
        if (plateColor != null) {
            stmt.bindString(35, plateColor);
        }
 
        String plateColorCode = entity.getPlateColorCode();
        if (plateColorCode != null) {
            stmt.bindString(36, plateColorCode);
        }
 
        String guardAlarm = entity.getGuardAlarm();
        if (guardAlarm != null) {
            stmt.bindString(37, guardAlarm);
        }
 
        String exemptFlag = entity.getExemptFlag();
        if (exemptFlag != null) {
            stmt.bindString(38, exemptFlag);
        }
 
        String driverArea = entity.getDriverArea();
        if (driverArea != null) {
            stmt.bindString(39, driverArea);
        }
 
        Integer serialNo = entity.getSerialNo();
        if (serialNo != null) {
            stmt.bindLong(40, serialNo);
        }
 
        String additionalFlag = entity.getAdditionalFlag();
        if (additionalFlag != null) {
            stmt.bindString(41, additionalFlag);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ReportCar readEntity(Cursor cursor, int offset) {
        ReportCar entity = new ReportCar( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // flowId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // evalId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // reportCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // carType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // carTypeCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // vehicleModel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // vehicleModelCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // engineNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // vinNo
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // plateNo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // plateType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // plateTypeCode
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // isMainCarDamaged
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // amountDamages
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // dutyRatio
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // insurancePolicyNo
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // insuranceCompany
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // commercialPolicyNo
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // commercialCompany
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // vehicleType
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // vehicleTypeCode
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // useProperty
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // usePropertyCode
            cursor.isNull(offset + 24) ? null : cursor.getDouble(offset + 24), // vehiclePrice
            cursor.isNull(offset + 25) ? null : cursor.getDouble(offset + 25), // realPrice
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // isImport
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // makeDate
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // enrolDate
            cursor.getInt(offset + 29), // seat
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // power
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // displacement
            cursor.isNull(offset + 32) ? null : cursor.getDouble(offset + 32), // tonnage
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // carColor
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // plateColor
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // plateColorCode
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // guardAlarm
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // exemptFlag
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // driverArea
            cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39), // serialNo
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40) // additionalFlag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReportCar entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFlowId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEvalId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReportCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCarType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCarTypeCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVehicleModel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVehicleModelCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEngineNo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVinNo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPlateNo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPlateType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPlateTypeCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsMainCarDamaged(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAmountDamages(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setDutyRatio(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setInsurancePolicyNo(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setInsuranceCompany(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCommercialPolicyNo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCommercialCompany(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setVehicleType(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setVehicleTypeCode(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setUseProperty(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setUsePropertyCode(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setVehiclePrice(cursor.isNull(offset + 24) ? null : cursor.getDouble(offset + 24));
        entity.setRealPrice(cursor.isNull(offset + 25) ? null : cursor.getDouble(offset + 25));
        entity.setIsImport(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setMakeDate(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setEnrolDate(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setSeat(cursor.getInt(offset + 29));
        entity.setPower(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setDisplacement(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setTonnage(cursor.isNull(offset + 32) ? null : cursor.getDouble(offset + 32));
        entity.setCarColor(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setPlateColor(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setPlateColorCode(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setGuardAlarm(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setExemptFlag(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setDriverArea(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setSerialNo(cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39));
        entity.setAdditionalFlag(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ReportCar entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ReportCar entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReportCar entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
