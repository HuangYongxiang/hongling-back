package com.hl.photo.table.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hl.photo.table.model.SurveyInjury;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SURVEY_INJURY".
*/
public class SurveyInjuryDao extends AbstractDao<SurveyInjury, String> {

    public static final String TABLENAME = "SURVEY_INJURY";

    /**
     * Properties of entity SurveyInjury.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property ReportCode = new Property(1, String.class, "reportCode", false, "REPORT_CODE");
        public final static Property InjuryName = new Property(2, String.class, "injuryName", false, "INJURY_NAME");
        public final static Property InjuryType = new Property(3, String.class, "injuryType", false, "INJURY_TYPE");
        public final static Property InjuryTypeCode = new Property(4, String.class, "injuryTypeCode", false, "INJURY_TYPE_CODE");
        public final static Property CasualtyType = new Property(5, String.class, "casualtyType", false, "CASUALTY_TYPE");
        public final static Property CasualtyTypeCode = new Property(6, String.class, "casualtyTypeCode", false, "CASUALTY_TYPE_CODE");
        public final static Property CertificateType = new Property(7, String.class, "certificateType", false, "CERTIFICATE_TYPE");
        public final static Property CertificateTypeCode = new Property(8, String.class, "certificateTypeCode", false, "CERTIFICATE_TYPE_CODE");
        public final static Property CertificateNo = new Property(9, String.class, "certificateNo", false, "CERTIFICATE_NO");
        public final static Property InjuryDescription = new Property(10, String.class, "injuryDescription", false, "INJURY_DESCRIPTION");
        public final static Property Hospital = new Property(11, String.class, "hospital", false, "HOSPITAL");
        public final static Property Sex = new Property(12, String.class, "sex", false, "SEX");
        public final static Property Age = new Property(13, int.class, "age", false, "AGE");
        public final static Property HouseholdRegister = new Property(14, String.class, "householdRegister", false, "HOUSEHOLD_REGISTER");
        public final static Property Profession = new Property(15, String.class, "profession", false, "PROFESSION");
        public final static Property PlateNo = new Property(16, String.class, "plateNo", false, "PLATE_NO");
        public final static Property PeopleType = new Property(17, String.class, "peopleType", false, "PEOPLE_TYPE");
        public final static Property PeopleTypeCode = new Property(18, String.class, "peopleTypeCode", false, "PEOPLE_TYPE_CODE");
        public final static Property InjuryGrade = new Property(19, String.class, "injuryGrade", false, "INJURY_GRADE");
        public final static Property InjuryGradeCode = new Property(20, String.class, "injuryGradeCode", false, "INJURY_GRADE_CODE");
        public final static Property IsSelfMedical = new Property(21, String.class, "isSelfMedical", false, "IS_SELF_MEDICAL");
        public final static Property DisabledGrade = new Property(22, String.class, "disabledGrade", false, "DISABLED_GRADE");
        public final static Property DisabledGradeCode = new Property(23, String.class, "disabledGradeCode", false, "DISABLED_GRADE_CODE");
        public final static Property SerialNo = new Property(24, Integer.class, "serialNo", false, "SERIAL_NO");
        public final static Property AdditionalFlag = new Property(25, String.class, "additionalFlag", false, "ADDITIONAL_FLAG");
    }


    public SurveyInjuryDao(DaoConfig config) {
        super(config);
    }
    
    public SurveyInjuryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SURVEY_INJURY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"REPORT_CODE\" TEXT," + // 1: reportCode
                "\"INJURY_NAME\" TEXT," + // 2: injuryName
                "\"INJURY_TYPE\" TEXT," + // 3: injuryType
                "\"INJURY_TYPE_CODE\" TEXT," + // 4: injuryTypeCode
                "\"CASUALTY_TYPE\" TEXT," + // 5: casualtyType
                "\"CASUALTY_TYPE_CODE\" TEXT," + // 6: casualtyTypeCode
                "\"CERTIFICATE_TYPE\" TEXT," + // 7: certificateType
                "\"CERTIFICATE_TYPE_CODE\" TEXT," + // 8: certificateTypeCode
                "\"CERTIFICATE_NO\" TEXT," + // 9: certificateNo
                "\"INJURY_DESCRIPTION\" TEXT," + // 10: injuryDescription
                "\"HOSPITAL\" TEXT," + // 11: hospital
                "\"SEX\" TEXT," + // 12: sex
                "\"AGE\" INTEGER NOT NULL ," + // 13: age
                "\"HOUSEHOLD_REGISTER\" TEXT," + // 14: householdRegister
                "\"PROFESSION\" TEXT," + // 15: profession
                "\"PLATE_NO\" TEXT," + // 16: plateNo
                "\"PEOPLE_TYPE\" TEXT," + // 17: peopleType
                "\"PEOPLE_TYPE_CODE\" TEXT," + // 18: peopleTypeCode
                "\"INJURY_GRADE\" TEXT," + // 19: injuryGrade
                "\"INJURY_GRADE_CODE\" TEXT," + // 20: injuryGradeCode
                "\"IS_SELF_MEDICAL\" TEXT," + // 21: isSelfMedical
                "\"DISABLED_GRADE\" TEXT," + // 22: disabledGrade
                "\"DISABLED_GRADE_CODE\" TEXT," + // 23: disabledGradeCode
                "\"SERIAL_NO\" INTEGER," + // 24: serialNo
                "\"ADDITIONAL_FLAG\" TEXT);"); // 25: additionalFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SURVEY_INJURY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SurveyInjury entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(2, reportCode);
        }
 
        String injuryName = entity.getInjuryName();
        if (injuryName != null) {
            stmt.bindString(3, injuryName);
        }
 
        String injuryType = entity.getInjuryType();
        if (injuryType != null) {
            stmt.bindString(4, injuryType);
        }
 
        String injuryTypeCode = entity.getInjuryTypeCode();
        if (injuryTypeCode != null) {
            stmt.bindString(5, injuryTypeCode);
        }
 
        String casualtyType = entity.getCasualtyType();
        if (casualtyType != null) {
            stmt.bindString(6, casualtyType);
        }
 
        String casualtyTypeCode = entity.getCasualtyTypeCode();
        if (casualtyTypeCode != null) {
            stmt.bindString(7, casualtyTypeCode);
        }
 
        String certificateType = entity.getCertificateType();
        if (certificateType != null) {
            stmt.bindString(8, certificateType);
        }
 
        String certificateTypeCode = entity.getCertificateTypeCode();
        if (certificateTypeCode != null) {
            stmt.bindString(9, certificateTypeCode);
        }
 
        String certificateNo = entity.getCertificateNo();
        if (certificateNo != null) {
            stmt.bindString(10, certificateNo);
        }
 
        String injuryDescription = entity.getInjuryDescription();
        if (injuryDescription != null) {
            stmt.bindString(11, injuryDescription);
        }
 
        String hospital = entity.getHospital();
        if (hospital != null) {
            stmt.bindString(12, hospital);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(13, sex);
        }
        stmt.bindLong(14, entity.getAge());
 
        String householdRegister = entity.getHouseholdRegister();
        if (householdRegister != null) {
            stmt.bindString(15, householdRegister);
        }
 
        String profession = entity.getProfession();
        if (profession != null) {
            stmt.bindString(16, profession);
        }
 
        String plateNo = entity.getPlateNo();
        if (plateNo != null) {
            stmt.bindString(17, plateNo);
        }
 
        String peopleType = entity.getPeopleType();
        if (peopleType != null) {
            stmt.bindString(18, peopleType);
        }
 
        String peopleTypeCode = entity.getPeopleTypeCode();
        if (peopleTypeCode != null) {
            stmt.bindString(19, peopleTypeCode);
        }
 
        String injuryGrade = entity.getInjuryGrade();
        if (injuryGrade != null) {
            stmt.bindString(20, injuryGrade);
        }
 
        String injuryGradeCode = entity.getInjuryGradeCode();
        if (injuryGradeCode != null) {
            stmt.bindString(21, injuryGradeCode);
        }
 
        String isSelfMedical = entity.getIsSelfMedical();
        if (isSelfMedical != null) {
            stmt.bindString(22, isSelfMedical);
        }
 
        String disabledGrade = entity.getDisabledGrade();
        if (disabledGrade != null) {
            stmt.bindString(23, disabledGrade);
        }
 
        String disabledGradeCode = entity.getDisabledGradeCode();
        if (disabledGradeCode != null) {
            stmt.bindString(24, disabledGradeCode);
        }
 
        Integer serialNo = entity.getSerialNo();
        if (serialNo != null) {
            stmt.bindLong(25, serialNo);
        }
 
        String additionalFlag = entity.getAdditionalFlag();
        if (additionalFlag != null) {
            stmt.bindString(26, additionalFlag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SurveyInjury entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String reportCode = entity.getReportCode();
        if (reportCode != null) {
            stmt.bindString(2, reportCode);
        }
 
        String injuryName = entity.getInjuryName();
        if (injuryName != null) {
            stmt.bindString(3, injuryName);
        }
 
        String injuryType = entity.getInjuryType();
        if (injuryType != null) {
            stmt.bindString(4, injuryType);
        }
 
        String injuryTypeCode = entity.getInjuryTypeCode();
        if (injuryTypeCode != null) {
            stmt.bindString(5, injuryTypeCode);
        }
 
        String casualtyType = entity.getCasualtyType();
        if (casualtyType != null) {
            stmt.bindString(6, casualtyType);
        }
 
        String casualtyTypeCode = entity.getCasualtyTypeCode();
        if (casualtyTypeCode != null) {
            stmt.bindString(7, casualtyTypeCode);
        }
 
        String certificateType = entity.getCertificateType();
        if (certificateType != null) {
            stmt.bindString(8, certificateType);
        }
 
        String certificateTypeCode = entity.getCertificateTypeCode();
        if (certificateTypeCode != null) {
            stmt.bindString(9, certificateTypeCode);
        }
 
        String certificateNo = entity.getCertificateNo();
        if (certificateNo != null) {
            stmt.bindString(10, certificateNo);
        }
 
        String injuryDescription = entity.getInjuryDescription();
        if (injuryDescription != null) {
            stmt.bindString(11, injuryDescription);
        }
 
        String hospital = entity.getHospital();
        if (hospital != null) {
            stmt.bindString(12, hospital);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(13, sex);
        }
        stmt.bindLong(14, entity.getAge());
 
        String householdRegister = entity.getHouseholdRegister();
        if (householdRegister != null) {
            stmt.bindString(15, householdRegister);
        }
 
        String profession = entity.getProfession();
        if (profession != null) {
            stmt.bindString(16, profession);
        }
 
        String plateNo = entity.getPlateNo();
        if (plateNo != null) {
            stmt.bindString(17, plateNo);
        }
 
        String peopleType = entity.getPeopleType();
        if (peopleType != null) {
            stmt.bindString(18, peopleType);
        }
 
        String peopleTypeCode = entity.getPeopleTypeCode();
        if (peopleTypeCode != null) {
            stmt.bindString(19, peopleTypeCode);
        }
 
        String injuryGrade = entity.getInjuryGrade();
        if (injuryGrade != null) {
            stmt.bindString(20, injuryGrade);
        }
 
        String injuryGradeCode = entity.getInjuryGradeCode();
        if (injuryGradeCode != null) {
            stmt.bindString(21, injuryGradeCode);
        }
 
        String isSelfMedical = entity.getIsSelfMedical();
        if (isSelfMedical != null) {
            stmt.bindString(22, isSelfMedical);
        }
 
        String disabledGrade = entity.getDisabledGrade();
        if (disabledGrade != null) {
            stmt.bindString(23, disabledGrade);
        }
 
        String disabledGradeCode = entity.getDisabledGradeCode();
        if (disabledGradeCode != null) {
            stmt.bindString(24, disabledGradeCode);
        }
 
        Integer serialNo = entity.getSerialNo();
        if (serialNo != null) {
            stmt.bindLong(25, serialNo);
        }
 
        String additionalFlag = entity.getAdditionalFlag();
        if (additionalFlag != null) {
            stmt.bindString(26, additionalFlag);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SurveyInjury readEntity(Cursor cursor, int offset) {
        SurveyInjury entity = new SurveyInjury( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // reportCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // injuryName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // injuryType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // injuryTypeCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // casualtyType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // casualtyTypeCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // certificateType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // certificateTypeCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // certificateNo
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // injuryDescription
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // hospital
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // sex
            cursor.getInt(offset + 13), // age
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // householdRegister
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // profession
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // plateNo
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // peopleType
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // peopleTypeCode
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // injuryGrade
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // injuryGradeCode
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // isSelfMedical
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // disabledGrade
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // disabledGradeCode
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // serialNo
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25) // additionalFlag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SurveyInjury entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setReportCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInjuryName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInjuryType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInjuryTypeCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCasualtyType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCasualtyTypeCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCertificateType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCertificateTypeCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCertificateNo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setInjuryDescription(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHospital(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSex(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAge(cursor.getInt(offset + 13));
        entity.setHouseholdRegister(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setProfession(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPlateNo(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPeopleType(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPeopleTypeCode(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setInjuryGrade(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setInjuryGradeCode(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setIsSelfMedical(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setDisabledGrade(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setDisabledGradeCode(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setSerialNo(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setAdditionalFlag(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SurveyInjury entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SurveyInjury entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SurveyInjury entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
